
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005128  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080052f8  080052f8  000062f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800539c  0800539c  0000726c  2**0
                  CONTENTS
  4 .ARM          00000008  0800539c  0800539c  0000639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053a4  080053a4  0000726c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a4  080053a4  000063a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053a8  080053a8  000063a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000026c  20000000  080053ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000026c  08005618  0000726c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08005618  000074c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000726c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e692  00000000  00000000  0000729c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a8  00000000  00000000  0001592e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00017bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aaa  00000000  00000000  00018980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022583  00000000  00000000  0001942a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105b0  00000000  00000000  0003b9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d16a2  00000000  00000000  0004bf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d5ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de8  00000000  00000000  0011d644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0012142c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000026c 	.word	0x2000026c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080052e0 	.word	0x080052e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000270 	.word	0x20000270
 800020c:	080052e0 	.word	0x080052e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Init_LCD>:
#include "main.h"
#include "lcd.h"
#include "fontdata.h"

//LCD inicializáció függvény
void Init_LCD() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, RESET);			//R/W = 0, mivel írni akarunk
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ba:	4816      	ldr	r0, [pc, #88]	@ (8000614 <Init_LCD+0x64>)
 80005bc:	f001 fc74 	bl	8001ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, SET);			//Enable = 1
 80005c0:	2201      	movs	r2, #1
 80005c2:	2180      	movs	r1, #128	@ 0x80
 80005c4:	4814      	ldr	r0, [pc, #80]	@ (8000618 <Init_LCD+0x68>)
 80005c6:	f001 fc6f 	bl	8001ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, RESET);		//RST = 0 (alacsony aktív)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d0:	4810      	ldr	r0, [pc, #64]	@ (8000614 <Init_LCD+0x64>)
 80005d2:	f001 fc69 	bl	8001ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IC_EN_GPIO_Port, IC_EN_Pin, RESET);			//OE = 0
 80005d6:	2200      	movs	r2, #0
 80005d8:	2140      	movs	r1, #64	@ 0x40
 80005da:	480f      	ldr	r0, [pc, #60]	@ (8000618 <Init_LCD+0x68>)
 80005dc:	f001 fc64 	bl	8001ea8 <HAL_GPIO_WritePin>
																	//Octal bufferek Output Enable jele (alacsony aktív)

	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, RESET);			//Enable = 0, ezt majd az irást megvalósító függvény kezeli
 80005e0:	2200      	movs	r2, #0
 80005e2:	2180      	movs	r1, #128	@ 0x80
 80005e4:	480c      	ldr	r0, [pc, #48]	@ (8000618 <Init_LCD+0x68>)
 80005e6:	f001 fc5f 	bl	8001ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, SET);			//RST = 1
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f0:	4808      	ldr	r0, [pc, #32]	@ (8000614 <Init_LCD+0x64>)
 80005f2:	f001 fc59 	bl	8001ea8 <HAL_GPIO_WritePin>

	LCD_Write(3, 0, 0x3F);											//Bekapcsoljuk mindkét kijelzőrészt (cs1, cs2)
 80005f6:	223f      	movs	r2, #63	@ 0x3f
 80005f8:	2100      	movs	r1, #0
 80005fa:	2003      	movs	r0, #3
 80005fc:	f000 f880 	bl	8000700 <LCD_Write>
	LCD_Write(3, 0, 0xC0);											//Beállítjuk a starting line addresst 0-ra
 8000600:	22c0      	movs	r2, #192	@ 0xc0
 8000602:	2100      	movs	r1, #0
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f87b 	bl	8000700 <LCD_Write>
	LCD_Clear();													//Cleareljük a kijelzőt
 800060a:	f000 f8e3 	bl	80007d4 <LCD_Clear>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020400 	.word	0x40020400
 8000618:	40020000 	.word	0x40020000

0800061c <DataToPinMUX>:

//Az adott 8 bites data változót fordítja le a pineknek megfelelően
void DataToPinMUX(char data) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	char select = 0b00000001;										//maszkolást segítő változó
 8000626:	2301      	movs	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (data & select));	    //LSB-vel kezdünk, ez lesz a DB0 pin
 800062a:	79fa      	ldrb	r2, [r7, #7]
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	4013      	ands	r3, r2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	2120      	movs	r1, #32
 8000636:	4830      	ldr	r0, [pc, #192]	@ (80006f8 <DataToPinMUX+0xdc>)
 8000638:	f001 fc36 	bl	8001ea8 <HAL_GPIO_WritePin>
	select <<= 1;													//Shifteljük a maszkolóváltozót, ezzel haladunk az MSB felé
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (data & select));
 8000642:	79fa      	ldrb	r2, [r7, #7]
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	4013      	ands	r3, r2
 8000648:	b2db      	uxtb	r3, r3
 800064a:	461a      	mov	r2, r3
 800064c:	2140      	movs	r1, #64	@ 0x40
 800064e:	482a      	ldr	r0, [pc, #168]	@ (80006f8 <DataToPinMUX+0xdc>)
 8000650:	f001 fc2a 	bl	8001ea8 <HAL_GPIO_WritePin>
	select <<= 1;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (data & select));
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	4013      	ands	r3, r2
 8000660:	b2db      	uxtb	r3, r3
 8000662:	461a      	mov	r2, r3
 8000664:	2180      	movs	r1, #128	@ 0x80
 8000666:	4824      	ldr	r0, [pc, #144]	@ (80006f8 <DataToPinMUX+0xdc>)
 8000668:	f001 fc1e 	bl	8001ea8 <HAL_GPIO_WritePin>
	select <<= 1;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (data & select));
 8000672:	79fa      	ldrb	r2, [r7, #7]
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	4013      	ands	r3, r2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	461a      	mov	r2, r3
 800067c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000680:	481d      	ldr	r0, [pc, #116]	@ (80006f8 <DataToPinMUX+0xdc>)
 8000682:	f001 fc11 	bl	8001ea8 <HAL_GPIO_WritePin>
	select <<= 1;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, (data & select));
 800068c:	79fa      	ldrb	r2, [r7, #7]
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	4013      	ands	r3, r2
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800069a:	4817      	ldr	r0, [pc, #92]	@ (80006f8 <DataToPinMUX+0xdc>)
 800069c:	f001 fc04 	bl	8001ea8 <HAL_GPIO_WritePin>
	select <<= 1;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, (data & select));
 80006a6:	79fa      	ldrb	r2, [r7, #7]
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	4013      	ands	r3, r2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b4:	4811      	ldr	r0, [pc, #68]	@ (80006fc <DataToPinMUX+0xe0>)
 80006b6:	f001 fbf7 	bl	8001ea8 <HAL_GPIO_WritePin>
	select <<= 1;
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, (data & select));
 80006c0:	79fa      	ldrb	r2, [r7, #7]
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	4013      	ands	r3, r2
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ce:	480b      	ldr	r0, [pc, #44]	@ (80006fc <DataToPinMUX+0xe0>)
 80006d0:	f001 fbea 	bl	8001ea8 <HAL_GPIO_WritePin>
	select <<= 1;
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, (data & select));		//Végül az MSB-t (DB7) maszkoljuk
 80006da:	79fa      	ldrb	r2, [r7, #7]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	4013      	ands	r3, r2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <DataToPinMUX+0xe0>)
 80006ea:	f001 fbdd 	bl	8001ea8 <HAL_GPIO_WritePin>
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020400 	.word	0x40020400

08000700 <LCD_Write>:

//LCD írást megvalósító függvény
void LCD_Write(char cs, char di, char data) {						//cs a chipselect jel (alacsony aktív)
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
 800070a:	460b      	mov	r3, r1
 800070c:	71bb      	strb	r3, [r7, #6]
 800070e:	4613      	mov	r3, r2
 8000710:	717b      	strb	r3, [r7, #5]
	switch (cs) {													//cs = 1: cs1  /  cs = 2: cs2  /  cs = 3: cs1,cs2
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d014      	beq.n	8000742 <LCD_Write+0x42>
 8000718:	2b03      	cmp	r3, #3
 800071a:	dc1e      	bgt.n	800075a <LCD_Write+0x5a>
 800071c:	2b01      	cmp	r3, #1
 800071e:	d002      	beq.n	8000726 <LCD_Write+0x26>
 8000720:	2b02      	cmp	r3, #2
 8000722:	d007      	beq.n	8000734 <LCD_Write+0x34>
 8000724:	e019      	b.n	800075a <LCD_Write+0x5a>
	case 1:
		HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072c:	4827      	ldr	r0, [pc, #156]	@ (80007cc <LCD_Write+0xcc>)
 800072e:	f001 fbbb 	bl	8001ea8 <HAL_GPIO_WritePin>
		break;
 8000732:	e012      	b.n	800075a <LCD_Write+0x5a>
	case 2:
		HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800073a:	4824      	ldr	r0, [pc, #144]	@ (80007cc <LCD_Write+0xcc>)
 800073c:	f001 fbb4 	bl	8001ea8 <HAL_GPIO_WritePin>
		break;
 8000740:	e00b      	b.n	800075a <LCD_Write+0x5a>
	case 3:
		HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000748:	4820      	ldr	r0, [pc, #128]	@ (80007cc <LCD_Write+0xcc>)
 800074a:	f001 fbad 	bl	8001ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000754:	481d      	ldr	r0, [pc, #116]	@ (80007cc <LCD_Write+0xcc>)
 8000756:	f001 fba7 	bl	8001ea8 <HAL_GPIO_WritePin>
	}

	switch (di) {													//di = 1 -> adatot küldünk
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <LCD_Write+0x66>
 8000760:	2b01      	cmp	r3, #1
 8000762:	d007      	beq.n	8000774 <LCD_Write+0x74>
 8000764:	e00d      	b.n	8000782 <LCD_Write+0x82>
	case 0:															//di = 0 -> parancsot küldünk
		HAL_GPIO_WritePin(LCD_DI_GPIO_Port, LCD_DI_Pin, RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800076c:	4817      	ldr	r0, [pc, #92]	@ (80007cc <LCD_Write+0xcc>)
 800076e:	f001 fb9b 	bl	8001ea8 <HAL_GPIO_WritePin>
		break;
 8000772:	e006      	b.n	8000782 <LCD_Write+0x82>
	case 1:
		HAL_GPIO_WritePin(LCD_DI_GPIO_Port, LCD_DI_Pin, SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800077a:	4814      	ldr	r0, [pc, #80]	@ (80007cc <LCD_Write+0xcc>)
 800077c:	f001 fb94 	bl	8001ea8 <HAL_GPIO_WritePin>
		break;
 8000780:	bf00      	nop
	}

	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, SET);			//Enable = 1
 8000782:	2201      	movs	r2, #1
 8000784:	2180      	movs	r1, #128	@ 0x80
 8000786:	4812      	ldr	r0, [pc, #72]	@ (80007d0 <LCD_Write+0xd0>)
 8000788:	f001 fb8e 	bl	8001ea8 <HAL_GPIO_WritePin>

	DataToPinMUX(data);												//Konvertáljuk a datát a pinekre
 800078c:	797b      	ldrb	r3, [r7, #5]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff44 	bl	800061c <DataToPinMUX>
	Sys_DelayUs(1);													//Várunk ~1 us-t, hogy az adatok megfelelően stabilak legyenek
 8000794:	2001      	movs	r0, #1
 8000796:	f000 f97d 	bl	8000a94 <Sys_DelayUs>

	HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, RESET);			//Enable lefutó élére veszi ki az LCD vezérlő az adatokat az input regiszterből
 800079a:	2200      	movs	r2, #0
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	480c      	ldr	r0, [pc, #48]	@ (80007d0 <LCD_Write+0xd0>)
 80007a0:	f001 fb82 	bl	8001ea8 <HAL_GPIO_WritePin>
	Sys_DelayUs(1);													//Várunk ~1 us-t, mivel az Enable nagyjából ennyi ideig alacsonynak kell lennie
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 f975 	bl	8000a94 <Sys_DelayUs>

	HAL_GPIO_WritePin(LCD_CS1_GPIO_Port, LCD_CS1_Pin, RESET);			//Visszaállítjuk a chipselect jeleket
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007b0:	4806      	ldr	r0, [pc, #24]	@ (80007cc <LCD_Write+0xcc>)
 80007b2:	f001 fb79 	bl	8001ea8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS2_GPIO_Port, LCD_CS2_Pin, RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007bc:	4803      	ldr	r0, [pc, #12]	@ (80007cc <LCD_Write+0xcc>)
 80007be:	f001 fb73 	bl	8001ea8 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40020800 	.word	0x40020800
 80007d0:	40020000 	.word	0x40020000

080007d4 <LCD_Clear>:

//LCD kijelzőjének törlése
void LCD_Clear() {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	char x, y;

	for (x = 0; x < 8; x++) {				//Először a 'page'-eken megyünk végig amiből 8 db van
 80007da:	2300      	movs	r3, #0
 80007dc:	71fb      	strb	r3, [r7, #7]
 80007de:	e01e      	b.n	800081e <LCD_Clear+0x4a>
		LCD_Write(3, 0, 0x40);				//Parancsot küldünk (NT7108 LCD kontroller adatlapjából kiderül, miért pont ezeket)
 80007e0:	2240      	movs	r2, #64	@ 0x40
 80007e2:	2100      	movs	r1, #0
 80007e4:	2003      	movs	r0, #3
 80007e6:	f7ff ff8b 	bl	8000700 <LCD_Write>
		LCD_Write(3, 0, (0xB8 | x));
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f063 0347 	orn	r3, r3, #71	@ 0x47
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	2003      	movs	r0, #3
 80007f8:	f7ff ff82 	bl	8000700 <LCD_Write>
		for (y = 0; y < 64; y++) {			//A 'page'-eken belül pedig végigmegyünk a 64-64 pixelen mindkét kijelzőn egyszerre
 80007fc:	2300      	movs	r3, #0
 80007fe:	71bb      	strb	r3, [r7, #6]
 8000800:	e007      	b.n	8000812 <LCD_Clear+0x3e>
			LCD_Write(3, 1, 0x00);			//Mindenhova 0 kerül, azaz a pageken belüli egy oszlopban lévő 8 db pixel "kikapcsol"
 8000802:	2200      	movs	r2, #0
 8000804:	2101      	movs	r1, #1
 8000806:	2003      	movs	r0, #3
 8000808:	f7ff ff7a 	bl	8000700 <LCD_Write>
		for (y = 0; y < 64; y++) {			//A 'page'-eken belül pedig végigmegyünk a 64-64 pixelen mindkét kijelzőn egyszerre
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	3301      	adds	r3, #1
 8000810:	71bb      	strb	r3, [r7, #6]
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	2b3f      	cmp	r3, #63	@ 0x3f
 8000816:	d9f4      	bls.n	8000802 <LCD_Clear+0x2e>
	for (x = 0; x < 8; x++) {				//Először a 'page'-eken megyünk végig amiből 8 db van
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	3301      	adds	r3, #1
 800081c:	71fb      	strb	r3, [r7, #7]
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	2b07      	cmp	r3, #7
 8000822:	d9dd      	bls.n	80007e0 <LCD_Clear+0xc>
		}
	}
}
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <LCD_WriteString>:

//String kiírást megvalósítő függvény, mely a karakterkiíró függvényt használja
void LCD_WriteString(const char *string, char Y, char X) {
 800082e:	b580      	push	{r7, lr}
 8000830:	b084      	sub	sp, #16
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	460b      	mov	r3, r1
 8000838:	70fb      	strb	r3, [r7, #3]
 800083a:	4613      	mov	r3, r2
 800083c:	70bb      	strb	r3, [r7, #2]
	char temp = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	72fb      	strb	r3, [r7, #11]
	int i = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
	while (string[i] != '\0') {						//Végigmegyünk a stringen, amíg nem találkozunk a lezáró nullával
 8000846:	e018      	b.n	800087a <LCD_WriteString+0x4c>
		temp = string[i];							//Egyenként írjuk ki a karaktereket
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	4413      	add	r3, r2
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	72fb      	strb	r3, [r7, #11]
		LCD_Write_Char(temp - 32, X, Y + 6 * i);
 8000852:	7afb      	ldrb	r3, [r7, #11]
 8000854:	3b20      	subs	r3, #32
 8000856:	b2d8      	uxtb	r0, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	4413      	add	r3, r2
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	b2da      	uxtb	r2, r3
 8000866:	78fb      	ldrb	r3, [r7, #3]
 8000868:	4413      	add	r3, r2
 800086a:	b2da      	uxtb	r2, r3
 800086c:	78bb      	ldrb	r3, [r7, #2]
 800086e:	4619      	mov	r1, r3
 8000870:	f000 f80e 	bl	8000890 <LCD_Write_Char>
		i++;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	3301      	adds	r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
	while (string[i] != '\0') {						//Végigmegyünk a stringen, amíg nem találkozunk a lezáró nullával
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	4413      	add	r3, r2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1e0      	bne.n	8000848 <LCD_WriteString+0x1a>
	}
}
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <LCD_Write_Char>:

//Karakter kiíró függvény az LCD-hez
void LCD_Write_Char(char cPlace, char cX, char cY) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
 800089a:	460b      	mov	r3, r1
 800089c:	71bb      	strb	r3, [r7, #6]
 800089e:	4613      	mov	r3, r2
 80008a0:	717b      	strb	r3, [r7, #5]
	char i = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	73fb      	strb	r3, [r7, #15]
	char chip = 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	73bb      	strb	r3, [r7, #14]
	if (cY >= 64) {									//Ha cY >= 64, akkor már a második kijelzőn vagyunk (cs2), mivel összesen 128 pixelünk van (64 - 64)
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ae:	d904      	bls.n	80008ba <LCD_Write_Char+0x2a>
		chip = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	73bb      	strb	r3, [r7, #14]
		cY -= 64;
 80008b4:	797b      	ldrb	r3, [r7, #5]
 80008b6:	3b40      	subs	r3, #64	@ 0x40
 80008b8:	717b      	strb	r3, [r7, #5]
	}
	LCD_Write(chip, 0, (0x40 | cY));				//Elküldjük az íráshoz szükséges parancsokat
 80008ba:	797b      	ldrb	r3, [r7, #5]
 80008bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	7bbb      	ldrb	r3, [r7, #14]
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff1a 	bl	8000700 <LCD_Write>
	LCD_Write(chip, 0, (0xB8 | cX));
 80008cc:	79bb      	ldrb	r3, [r7, #6]
 80008ce:	f063 0347 	orn	r3, r3, #71	@ 0x47
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	7bbb      	ldrb	r3, [r7, #14]
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff11 	bl	8000700 <LCD_Write>
	for (i = 0; i < 5; i++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	e02f      	b.n	8000944 <LCD_Write_Char+0xb4>
		if (cY + i >= 64) {
 80008e4:	797a      	ldrb	r2, [r7, #5]
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	4413      	add	r3, r2
 80008ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ec:	dd1a      	ble.n	8000924 <LCD_Write_Char+0x94>
			chip = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	73bb      	strb	r3, [r7, #14]
			LCD_Write(chip, 0, (0x40 | (cY + i - 64)));
 80008f2:	797a      	ldrb	r2, [r7, #5]
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	4413      	add	r3, r2
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	3b40      	subs	r3, #64	@ 0x40
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000904:	b25b      	sxtb	r3, r3
 8000906:	b2da      	uxtb	r2, r3
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fef7 	bl	8000700 <LCD_Write>
			LCD_Write(chip, 0, (0xB8 | cX));
 8000912:	79bb      	ldrb	r3, [r7, #6]
 8000914:	f063 0347 	orn	r3, r3, #71	@ 0x47
 8000918:	b2da      	uxtb	r2, r3
 800091a:	7bbb      	ldrb	r3, [r7, #14]
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff feee 	bl	8000700 <LCD_Write>
		}
		LCD_Write(chip, 1, fontdata[cPlace * 5 + i]);
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	4613      	mov	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	441a      	add	r2, r3
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	4413      	add	r3, r2
 8000930:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <LCD_Write_Char+0xc4>)
 8000932:	5cd2      	ldrb	r2, [r2, r3]
 8000934:	7bbb      	ldrb	r3, [r7, #14]
 8000936:	2101      	movs	r1, #1
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fee1 	bl	8000700 <LCD_Write>
	for (i = 0; i < 5; i++) {
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	3301      	adds	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	2b04      	cmp	r3, #4
 8000948:	d9cc      	bls.n	80008e4 <LCD_Write_Char+0x54>
	}
}
 800094a:	bf00      	nop
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000000 	.word	0x20000000

08000958 <HandleDebounce>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HandleDebounce() {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	if (debounce) {
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <HandleDebounce+0x28>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d00a      	beq.n	800097c <HandleDebounce+0x24>
		if (HAL_GetTick() - last_time_btn_pressed >= DEBOUNCE_DELAY) {
 8000966:	f000 ff1f 	bl	80017a8 <HAL_GetTick>
 800096a:	4602      	mov	r2, r0
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <HandleDebounce+0x2c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	2bc7      	cmp	r3, #199	@ 0xc7
 8000974:	d902      	bls.n	800097c <HandleDebounce+0x24>
			debounce = false;
 8000976:	4b02      	ldr	r3, [pc, #8]	@ (8000980 <HandleDebounce+0x28>)
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000365 	.word	0x20000365
 8000984:	20000368 	.word	0x20000368

08000988 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
	uint32_t current_time = HAL_GetTick();
 8000992:	f000 ff09 	bl	80017a8 <HAL_GetTick>
 8000996:	60f8      	str	r0, [r7, #12]
	if (debounce) {
 8000998:	4b2b      	ldr	r3, [pc, #172]	@ (8000a48 <HAL_GPIO_EXTI_Callback+0xc0>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d14d      	bne.n	8000a3e <HAL_GPIO_EXTI_Callback+0xb6>
		return;
	}
	debounce = true;
 80009a2:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <HAL_GPIO_EXTI_Callback+0xc0>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
	last_time_btn_pressed = current_time;
 80009a8:	4a28      	ldr	r2, [pc, #160]	@ (8000a4c <HAL_GPIO_EXTI_Callback+0xc4>)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6013      	str	r3, [r2, #0]

	switch (GPIO_Pin) {
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	2b07      	cmp	r3, #7
 80009b4:	d83f      	bhi.n	8000a36 <HAL_GPIO_EXTI_Callback+0xae>
 80009b6:	a201      	add	r2, pc, #4	@ (adr r2, 80009bc <HAL_GPIO_EXTI_Callback+0x34>)
 80009b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009bc:	08000a21 	.word	0x08000a21
 80009c0:	080009ff 	.word	0x080009ff
 80009c4:	08000a37 	.word	0x08000a37
 80009c8:	080009dd 	.word	0x080009dd
 80009cc:	08000a37 	.word	0x08000a37
 80009d0:	08000a37 	.word	0x08000a37
 80009d4:	08000a37 	.word	0x08000a37
 80009d8:	08000a29 	.word	0x08000a29
	case BTN_UP_Pin:
		if (main_menu_items > 0 && menu_state == MAIN_MENU) {
 80009dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0xc8>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d024      	beq.n	8000a30 <HAL_GPIO_EXTI_Callback+0xa8>
 80009e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <HAL_GPIO_EXTI_Callback+0xcc>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d120      	bne.n	8000a30 <HAL_GPIO_EXTI_Callback+0xa8>
			main_menu_items--;
 80009ee:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0xc8>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	3b01      	subs	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0xc8>)
 80009fa:	701a      	strb	r2, [r3, #0]
		}
		break;
 80009fc:	e018      	b.n	8000a30 <HAL_GPIO_EXTI_Callback+0xa8>

	case BTN_DOWN_Pin:
		if (main_menu_items < 3 && menu_state == MAIN_MENU) {
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d815      	bhi.n	8000a34 <HAL_GPIO_EXTI_Callback+0xac>
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d111      	bne.n	8000a34 <HAL_GPIO_EXTI_Callback+0xac>
			main_menu_items++;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	3301      	adds	r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000a1c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a1e:	e009      	b.n	8000a34 <HAL_GPIO_EXTI_Callback+0xac>

	case BTN_RIGHT_Pin:
		menu_state = SUB_MENU;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
		break;
 8000a26:	e006      	b.n	8000a36 <HAL_GPIO_EXTI_Callback+0xae>

	case BTN_LEFT_Pin:
		menu_state = MAIN_MENU;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
		break;
 8000a2e:	e002      	b.n	8000a36 <HAL_GPIO_EXTI_Callback+0xae>
		break;
 8000a30:	bf00      	nop
 8000a32:	e000      	b.n	8000a36 <HAL_GPIO_EXTI_Callback+0xae>
		break;
 8000a34:	bf00      	nop
	}

	update_required = true;
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e000      	b.n	8000a40 <HAL_GPIO_EXTI_Callback+0xb8>
		return;
 8000a3e:	bf00      	nop
}
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000365 	.word	0x20000365
 8000a4c:	20000368 	.word	0x20000368
 8000a50:	2000036d 	.word	0x2000036d
 8000a54:	2000036c 	.word	0x2000036c
 8000a58:	20000364 	.word	0x20000364

08000a5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *handle) {
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	if (handle->Instance == TIM4) {
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d108      	bne.n	8000a80 <HAL_TIM_PeriodElapsedCallback+0x24>
		if (sys_delay > 0) {
 8000a6e:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	dd04      	ble.n	8000a80 <HAL_TIM_PeriodElapsedCallback+0x24>
			sys_delay--;
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a7e:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40000800 	.word	0x40000800
 8000a90:	20000360 	.word	0x20000360

08000a94 <Sys_DelayUs>:

void Sys_DelayUs(int us) {
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	sys_delay = us;
 8000a9c:	4a07      	ldr	r2, [pc, #28]	@ (8000abc <Sys_DelayUs+0x28>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
	while (sys_delay)
 8000aa2:	bf00      	nop
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <Sys_DelayUs+0x28>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1fb      	bne.n	8000aa4 <Sys_DelayUs+0x10>
		;
}
 8000aac:	bf00      	nop
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000360 	.word	0x20000360

08000ac0 <Init_Peripherials>:

void Init_Peripherials() {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	HAL_Init();
 8000ac4:	f000 fe0a 	bl	80016dc <HAL_Init>
	SystemClock_Config();
 8000ac8:	f000 f848 	bl	8000b5c <SystemClock_Config>
	MX_GPIO_Init();
 8000acc:	f000 f99e 	bl	8000e0c <MX_GPIO_Init>
	MX_TIM2_Init();
 8000ad0:	f000 f8b0 	bl	8000c34 <MX_TIM2_Init>
	MX_TIM4_Init();
 8000ad4:	f000 f924 	bl	8000d20 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8000ad8:	f000 f96e 	bl	8000db8 <MX_USART2_UART_Init>
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <Start_Peripherials>:

void Start_Peripherials() {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <Start_Peripherials+0x1c>)
 8000ae6:	f002 f849 	bl	8002b7c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000aea:	2100      	movs	r1, #0
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <Start_Peripherials+0x20>)
 8000aee:	f002 f90f 	bl	8002d10 <HAL_TIM_PWM_Start>
	Init_LCD();
 8000af2:	f7ff fd5d 	bl	80005b0 <Init_LCD>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200002d0 	.word	0x200002d0
 8000b00:	20000288 	.word	0x20000288

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	Init_Peripherials();
 8000b08:	f7ff ffda 	bl	8000ac0 <Init_Peripherials>
	Start_Peripherials();
 8000b0c:	f7ff ffe8 	bl	8000ae0 <Start_Peripherials>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
	menu_state = MAIN_MENU;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <main+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
	main_menu_items = UART_CONFIG;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <main+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
	Update_Main_Menu();
 8000b1c:	f000 fa62 	bl	8000fe4 <Update_Main_Menu>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HandleDebounce();
 8000b20:	f7ff ff1a 	bl	8000958 <HandleDebounce>

		if (update_required) {
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <main+0x54>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0f8      	beq.n	8000b20 <main+0x1c>
			if (menu_state == MAIN_MENU) {
 8000b2e:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <main+0x4c>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <main+0x38>
				Update_Main_Menu();
 8000b36:	f000 fa55 	bl	8000fe4 <Update_Main_Menu>
 8000b3a:	e005      	b.n	8000b48 <main+0x44>
			} else if (menu_state == SUB_MENU) {
 8000b3c:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <main+0x4c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d101      	bne.n	8000b48 <main+0x44>
				Update_Sub_Menu();
 8000b44:	f000 fbde 	bl	8001304 <Update_Sub_Menu>
			}
			update_required = false;
 8000b48:	4b03      	ldr	r3, [pc, #12]	@ (8000b58 <main+0x54>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
		HandleDebounce();
 8000b4e:	e7e7      	b.n	8000b20 <main+0x1c>
 8000b50:	2000036c 	.word	0x2000036c
 8000b54:	2000036d 	.word	0x2000036d
 8000b58:	20000364 	.word	0x20000364

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	@ 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	2234      	movs	r2, #52	@ 0x34
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 ff38 	bl	80049e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	4b29      	ldr	r3, [pc, #164]	@ (8000c2c <SystemClock_Config+0xd0>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b88:	4a28      	ldr	r2, [pc, #160]	@ (8000c2c <SystemClock_Config+0xd0>)
 8000b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b90:	4b26      	ldr	r3, [pc, #152]	@ (8000c2c <SystemClock_Config+0xd0>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <SystemClock_Config+0xd4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a22      	ldr	r2, [pc, #136]	@ (8000c30 <SystemClock_Config+0xd4>)
 8000ba6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <SystemClock_Config+0xd4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bd0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000bd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fcda 	bl	80025a0 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bf2:	f000 f9f1 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c02:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	2105      	movs	r1, #5
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 f979 	bl	8001f0c <HAL_RCC_ClockConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c20:	f000 f9da 	bl	8000fd8 <Error_Handler>
  }
}
 8000c24:	bf00      	nop
 8000c26:	3750      	adds	r7, #80	@ 0x50
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40007000 	.word	0x40007000

08000c34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08e      	sub	sp, #56	@ 0x38
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	f107 0320 	add.w	r3, r7, #32
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]
 8000c62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c64:	4b2d      	ldr	r3, [pc, #180]	@ (8000d1c <MX_TIM2_Init+0xe8>)
 8000c66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d1c <MX_TIM2_Init+0xe8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b2a      	ldr	r3, [pc, #168]	@ (8000d1c <MX_TIM2_Init+0xe8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000c78:	4b28      	ldr	r3, [pc, #160]	@ (8000d1c <MX_TIM2_Init+0xe8>)
 8000c7a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <MX_TIM2_Init+0xe8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c86:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <MX_TIM2_Init+0xe8>)
 8000c88:	2280      	movs	r2, #128	@ 0x80
 8000c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c8c:	4823      	ldr	r0, [pc, #140]	@ (8000d1c <MX_TIM2_Init+0xe8>)
 8000c8e:	f001 ff25 	bl	8002adc <HAL_TIM_Base_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c98:	f000 f99e 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	481c      	ldr	r0, [pc, #112]	@ (8000d1c <MX_TIM2_Init+0xe8>)
 8000caa:	f002 faab 	bl	8003204 <HAL_TIM_ConfigClockSource>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000cb4:	f000 f990 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cb8:	4818      	ldr	r0, [pc, #96]	@ (8000d1c <MX_TIM2_Init+0xe8>)
 8000cba:	f001 ffcf 	bl	8002c5c <HAL_TIM_PWM_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000cc4:	f000 f988 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4811      	ldr	r0, [pc, #68]	@ (8000d1c <MX_TIM2_Init+0xe8>)
 8000cd8:	f002 fea0 	bl	8003a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ce2:	f000 f979 	bl	8000fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ce6:	2360      	movs	r3, #96	@ 0x60
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 8000cea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000cee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4807      	ldr	r0, [pc, #28]	@ (8000d1c <MX_TIM2_Init+0xe8>)
 8000d00:	f002 f9be 	bl	8003080 <HAL_TIM_PWM_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d0a:	f000 f965 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d0e:	4803      	ldr	r0, [pc, #12]	@ (8000d1c <MX_TIM2_Init+0xe8>)
 8000d10:	f000 fb8a 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8000d14:	bf00      	nop
 8000d16:	3738      	adds	r7, #56	@ 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000288 	.word	0x20000288

08000d20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <MX_TIM4_Init+0x90>)
 8000d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000db4 <MX_TIM4_Init+0x94>)
 8000d40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d42:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <MX_TIM4_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <MX_TIM4_Init+0x90>)
 8000d4a:	2210      	movs	r2, #16
 8000d4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 84;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <MX_TIM4_Init+0x90>)
 8000d50:	2254      	movs	r2, #84	@ 0x54
 8000d52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <MX_TIM4_Init+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <MX_TIM4_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d60:	4813      	ldr	r0, [pc, #76]	@ (8000db0 <MX_TIM4_Init+0x90>)
 8000d62:	f001 febb 	bl	8002adc <HAL_TIM_Base_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000d6c:	f000 f934 	bl	8000fd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480c      	ldr	r0, [pc, #48]	@ (8000db0 <MX_TIM4_Init+0x90>)
 8000d7e:	f002 fa41 	bl	8003204 <HAL_TIM_ConfigClockSource>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000d88:	f000 f926 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d94:	463b      	mov	r3, r7
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_TIM4_Init+0x90>)
 8000d9a:	f002 fe3f 	bl	8003a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8000da4:	f000 f918 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200002d0 	.word	0x200002d0
 8000db4:	40000800 	.word	0x40000800

08000db8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <MX_USART2_UART_Init+0x50>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f002 fea4 	bl	8003b3c <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dfa:	f000 f8ed 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000318 	.word	0x20000318
 8000e08:	40004400 	.word	0x40004400

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b68      	ldr	r3, [pc, #416]	@ (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a67      	ldr	r2, [pc, #412]	@ (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b65      	ldr	r3, [pc, #404]	@ (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b61      	ldr	r3, [pc, #388]	@ (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a60      	ldr	r2, [pc, #384]	@ (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b5e      	ldr	r3, [pc, #376]	@ (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b5a      	ldr	r3, [pc, #360]	@ (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a59      	ldr	r2, [pc, #356]	@ (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b57      	ldr	r3, [pc, #348]	@ (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	4b53      	ldr	r3, [pc, #332]	@ (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a52      	ldr	r2, [pc, #328]	@ (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b50      	ldr	r3, [pc, #320]	@ (8000fc8 <MX_GPIO_Init+0x1bc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_EN_Pin|USER_LED_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 5185 	mov.w	r1, #4256	@ 0x10a0
 8000e98:	484c      	ldr	r0, [pc, #304]	@ (8000fcc <MX_GPIO_Init+0x1c0>)
 8000e9a:	f001 f805 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IC_EN_GPIO_Port, IC_EN_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2140      	movs	r1, #64	@ 0x40
 8000ea2:	484a      	ldr	r0, [pc, #296]	@ (8000fcc <MX_GPIO_Init+0x1c0>)
 8000ea4:	f001 f800 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 519f 	mov.w	r1, #5088	@ 0x13e0
 8000eae:	4848      	ldr	r0, [pc, #288]	@ (8000fd0 <MX_GPIO_Init+0x1c4>)
 8000eb0:	f000 fffa 	bl	8001ea8 <HAL_GPIO_WritePin>
                          |DB4_Pin|LCD_DI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB7_Pin|LCD_RW_Pin|DB5_Pin|DB6_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 51b8 	mov.w	r1, #5888	@ 0x1700
 8000eba:	4846      	ldr	r0, [pc, #280]	@ (8000fd4 <MX_GPIO_Init+0x1c8>)
 8000ebc:	f000 fff4 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec6:	4843      	ldr	r0, [pc, #268]	@ (8000fd4 <MX_GPIO_Init+0x1c8>)
 8000ec8:	f000 ffee 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS1_Pin|LCD_CS2_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000ed2:	483f      	ldr	r0, [pc, #252]	@ (8000fd0 <MX_GPIO_Init+0x1c4>)
 8000ed4:	f000 ffe8 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin BTN_RIGHT_Pin BTN_DOWN_Pin BTN_UP_Pin
                           BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = B1_Pin|BTN_RIGHT_Pin|BTN_DOWN_Pin|BTN_UP_Pin
 8000ed8:	f242 030f 	movw	r3, #8207	@ 0x200f
 8000edc:	617b      	str	r3, [r7, #20]
                          |BTN_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ede:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4838      	ldr	r0, [pc, #224]	@ (8000fd0 <MX_GPIO_Init+0x1c4>)
 8000ef0:	f000 fe2e 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BTN2_Pin */
  GPIO_InitStruct.Pin = LCD_BTN2_Pin;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_BTN2_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4831      	ldr	r0, [pc, #196]	@ (8000fcc <MX_GPIO_Init+0x1c0>)
 8000f08:	f000 fe22 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin IC_EN_Pin LCD_EN_Pin USER_LED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|IC_EN_Pin|LCD_EN_Pin|USER_LED_Pin;
 8000f0c:	f44f 5387 	mov.w	r3, #4320	@ 0x10e0
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4829      	ldr	r0, [pc, #164]	@ (8000fcc <MX_GPIO_Init+0x1c0>)
 8000f26:	f000 fe13 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB0_Pin DB1_Pin DB2_Pin DB3_Pin
                           DB4_Pin LCD_CS1_Pin LCD_CS2_Pin LCD_DI_Pin */
  GPIO_InitStruct.Pin = DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin
 8000f2a:	f44f 53ff 	mov.w	r3, #8160	@ 0x1fe0
 8000f2e:	617b      	str	r3, [r7, #20]
                          |DB4_Pin|LCD_CS1_Pin|LCD_CS2_Pin|LCD_DI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	4823      	ldr	r0, [pc, #140]	@ (8000fd0 <MX_GPIO_Init+0x1c4>)
 8000f44:	f000 fe04 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BTN1_Pin */
  GPIO_InitStruct.Pin = LCD_BTN1_Pin;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_BTN1_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	481e      	ldr	r0, [pc, #120]	@ (8000fd4 <MX_GPIO_Init+0x1c8>)
 8000f5c:	f000 fdf8 	bl	8001b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB7_Pin LCD_RW_Pin LCD_RST_Pin DB5_Pin
                           DB6_Pin */
  GPIO_InitStruct.Pin = DB7_Pin|LCD_RW_Pin|LCD_RST_Pin|DB5_Pin
 8000f60:	f44f 535c 	mov.w	r3, #14080	@ 0x3700
 8000f64:	617b      	str	r3, [r7, #20]
                          |DB6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4816      	ldr	r0, [pc, #88]	@ (8000fd4 <MX_GPIO_Init+0x1c8>)
 8000f7a:	f000 fde9 	bl	8001b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2006      	movs	r0, #6
 8000f84:	f000 fd1b 	bl	80019be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f88:	2006      	movs	r0, #6
 8000f8a:	f000 fd34 	bl	80019f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	2007      	movs	r0, #7
 8000f94:	f000 fd13 	bl	80019be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f98:	2007      	movs	r0, #7
 8000f9a:	f000 fd2c 	bl	80019f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2008      	movs	r0, #8
 8000fa4:	f000 fd0b 	bl	80019be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000fa8:	2008      	movs	r0, #8
 8000faa:	f000 fd24 	bl	80019f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2009      	movs	r0, #9
 8000fb4:	f000 fd03 	bl	80019be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000fb8:	2009      	movs	r0, #9
 8000fba:	f000 fd1c 	bl	80019f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	@ 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <Error_Handler+0x8>

08000fe4 <Update_Main_Menu>:
const char *main_items[] = { "UART CONFIG", "ADD WEIGHT", "MANUAL SET",
		"OPTIONS" };

uint16_t weight = PAYLOAD_EMPTY_WEIGHT;

void Update_Main_Menu() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
	int j = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
	int displayWidth = 123;
 8000fee:	237b      	movs	r3, #123	@ 0x7b
 8000ff0:	607b      	str	r3, [r7, #4]

	LCD_Clear();
 8000ff2:	f7ff fbef 	bl	80007d4 <LCD_Clear>

	for (int i = 0; i < 4; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	e032      	b.n	8001062 <Update_Main_Menu+0x7e>
		int textWidth = strlen(main_items[i]) * 6;
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8001074 <Update_Main_Menu+0x90>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f903 	bl	8000210 <strlen>
 800100a:	4602      	mov	r2, r0
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	603b      	str	r3, [r7, #0]
		LCD_WriteString(main_items[i], (displayWidth - textWidth) / 2, j);
 8001016:	4a17      	ldr	r2, [pc, #92]	@ (8001074 <Update_Main_Menu+0x90>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	0fda      	lsrs	r2, r3, #31
 8001026:	4413      	add	r3, r2
 8001028:	105b      	asrs	r3, r3, #1
 800102a:	b2db      	uxtb	r3, r3
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	4619      	mov	r1, r3
 8001032:	f7ff fbfc 	bl	800082e <LCD_WriteString>
		if (main_menu_items == i) {
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <Update_Main_Menu+0x94>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	4293      	cmp	r3, r2
 8001042:	d108      	bne.n	8001056 <Update_Main_Menu+0x72>
			LCD_WriteString("<<", 100, i * 2);
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	b2db      	uxtb	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	2164      	movs	r1, #100	@ 0x64
 8001050:	480a      	ldr	r0, [pc, #40]	@ (800107c <Update_Main_Menu+0x98>)
 8001052:	f7ff fbec 	bl	800082e <LCD_WriteString>
		}
		j += 2;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3302      	adds	r3, #2
 800105a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 4; i++) {
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	3301      	adds	r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	2b03      	cmp	r3, #3
 8001066:	ddc9      	ble.n	8000ffc <Update_Main_Menu+0x18>
	}
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200001fc 	.word	0x200001fc
 8001078:	2000036d 	.word	0x2000036d
 800107c:	08005324 	.word	0x08005324

08001080 <Display_UART_Config>:

void Display_UART_Config() {
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <Display_Add_Weight>:

int Display_Add_Weight() {
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
	int y, length;
	char str[20];
	bool weight_changed = false;
 8001096:	2300      	movs	r3, #0
 8001098:	76fb      	strb	r3, [r7, #27]

	while (HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin)) {
 800109a:	e068      	b.n	800116e <Display_Add_Weight+0xde>
		if (!HAL_GPIO_ReadPin(LCD_BTN2_GPIO_Port, LCD_BTN2_Pin)
 800109c:	2102      	movs	r1, #2
 800109e:	483a      	ldr	r0, [pc, #232]	@ (8001188 <Display_Add_Weight+0xf8>)
 80010a0:	f000 feea 	bl	8001e78 <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10f      	bne.n	80010ca <Display_Add_Weight+0x3a>
				&& weight < 500) {
 80010aa:	4b38      	ldr	r3, [pc, #224]	@ (800118c <Display_Add_Weight+0xfc>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010b2:	d20a      	bcs.n	80010ca <Display_Add_Weight+0x3a>
			HAL_Delay(200);
 80010b4:	20c8      	movs	r0, #200	@ 0xc8
 80010b6:	f000 fb83 	bl	80017c0 <HAL_Delay>
			weight += 50;
 80010ba:	4b34      	ldr	r3, [pc, #208]	@ (800118c <Display_Add_Weight+0xfc>)
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	3332      	adds	r3, #50	@ 0x32
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b32      	ldr	r3, [pc, #200]	@ (800118c <Display_Add_Weight+0xfc>)
 80010c4:	801a      	strh	r2, [r3, #0]
			weight_changed = true;
 80010c6:	2301      	movs	r3, #1
 80010c8:	76fb      	strb	r3, [r7, #27]
		}

		if (!HAL_GPIO_ReadPin(LCD_BTN1_GPIO_Port, LCD_BTN1_Pin)
 80010ca:	2101      	movs	r1, #1
 80010cc:	4830      	ldr	r0, [pc, #192]	@ (8001190 <Display_Add_Weight+0x100>)
 80010ce:	f000 fed3 	bl	8001e78 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10e      	bne.n	80010f6 <Display_Add_Weight+0x66>
				&& weight > PAYLOAD_EMPTY_WEIGHT) {
 80010d8:	4b2c      	ldr	r3, [pc, #176]	@ (800118c <Display_Add_Weight+0xfc>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2b96      	cmp	r3, #150	@ 0x96
 80010de:	d90a      	bls.n	80010f6 <Display_Add_Weight+0x66>
			HAL_Delay(200);
 80010e0:	20c8      	movs	r0, #200	@ 0xc8
 80010e2:	f000 fb6d 	bl	80017c0 <HAL_Delay>
			weight -= 50;
 80010e6:	4b29      	ldr	r3, [pc, #164]	@ (800118c <Display_Add_Weight+0xfc>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	3b32      	subs	r3, #50	@ 0x32
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b27      	ldr	r3, [pc, #156]	@ (800118c <Display_Add_Weight+0xfc>)
 80010f0:	801a      	strh	r2, [r3, #0]
			weight_changed = true;
 80010f2:	2301      	movs	r3, #1
 80010f4:	76fb      	strb	r3, [r7, #27]
		}

		if (weight_changed) {
 80010f6:	7efb      	ldrb	r3, [r7, #27]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <Display_Add_Weight+0x74>
			LCD_Clear();
 80010fc:	f7ff fb6a 	bl	80007d4 <LCD_Clear>
			weight_changed = false;
 8001100:	2300      	movs	r3, #0
 8001102:	76fb      	strb	r3, [r7, #27]
		}

		if (weight >= 100) {
 8001104:	4b21      	ldr	r3, [pc, #132]	@ (800118c <Display_Add_Weight+0xfc>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	2b63      	cmp	r3, #99	@ 0x63
 800110a:	d902      	bls.n	8001112 <Display_Add_Weight+0x82>
			y = 48;
 800110c:	2330      	movs	r3, #48	@ 0x30
 800110e:	61fb      	str	r3, [r7, #28]
 8001110:	e001      	b.n	8001116 <Display_Add_Weight+0x86>
		}

		else {
			y = 54;
 8001112:	2336      	movs	r3, #54	@ 0x36
 8001114:	61fb      	str	r3, [r7, #28]
		}

		length = snprintf(NULL, 0, "%d", weight);
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <Display_Add_Weight+0xfc>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	4a1e      	ldr	r2, [pc, #120]	@ (8001194 <Display_Add_Weight+0x104>)
 800111c:	2100      	movs	r1, #0
 800111e:	2000      	movs	r0, #0
 8001120:	f003 fc2a 	bl	8004978 <sniprintf>
 8001124:	6178      	str	r0, [r7, #20]
		snprintf(str, length + 1, "%d", weight);
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	4619      	mov	r1, r3
 800112c:	4b17      	ldr	r3, [pc, #92]	@ (800118c <Display_Add_Weight+0xfc>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	4638      	mov	r0, r7
 8001132:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <Display_Add_Weight+0x104>)
 8001134:	f003 fc20 	bl	8004978 <sniprintf>

		LCD_WriteString("WEIGHT:", (126 - strlen("WEIGHT:") * 6) / 2, 2);
 8001138:	2202      	movs	r2, #2
 800113a:	212a      	movs	r1, #42	@ 0x2a
 800113c:	4816      	ldr	r0, [pc, #88]	@ (8001198 <Display_Add_Weight+0x108>)
 800113e:	f7ff fb76 	bl	800082e <LCD_WriteString>
		LCD_WriteString("<", 28, 4);
 8001142:	2204      	movs	r2, #4
 8001144:	211c      	movs	r1, #28
 8001146:	4815      	ldr	r0, [pc, #84]	@ (800119c <Display_Add_Weight+0x10c>)
 8001148:	f7ff fb71 	bl	800082e <LCD_WriteString>
		LCD_WriteString(">", 90, 4);
 800114c:	2204      	movs	r2, #4
 800114e:	215a      	movs	r1, #90	@ 0x5a
 8001150:	4813      	ldr	r0, [pc, #76]	@ (80011a0 <Display_Add_Weight+0x110>)
 8001152:	f7ff fb6c 	bl	800082e <LCD_WriteString>
		LCD_WriteString(str, y, 4);
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	b2d9      	uxtb	r1, r3
 800115a:	463b      	mov	r3, r7
 800115c:	2204      	movs	r2, #4
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fb65 	bl	800082e <LCD_WriteString>
		LCD_WriteString("G", 69, 4);
 8001164:	2204      	movs	r2, #4
 8001166:	2145      	movs	r1, #69	@ 0x45
 8001168:	480e      	ldr	r0, [pc, #56]	@ (80011a4 <Display_Add_Weight+0x114>)
 800116a:	f7ff fb60 	bl	800082e <LCD_WriteString>
	while (HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin)) {
 800116e:	2108      	movs	r1, #8
 8001170:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <Display_Add_Weight+0x118>)
 8001172:	f000 fe81 	bl	8001e78 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d18f      	bne.n	800109c <Display_Add_Weight+0xc>
	}
}
 800117c:	bf00      	nop
 800117e:	4618      	mov	r0, r3
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020000 	.word	0x40020000
 800118c:	2000020c 	.word	0x2000020c
 8001190:	40020400 	.word	0x40020400
 8001194:	08005328 	.word	0x08005328
 8001198:	0800532c 	.word	0x0800532c
 800119c:	08005334 	.word	0x08005334
 80011a0:	08005338 	.word	0x08005338
 80011a4:	0800533c 	.word	0x0800533c
 80011a8:	40020800 	.word	0x40020800

080011ac <Display_Options>:

void Display_Options() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
	int brightness, length;
	int y;
	char str[20];
	bool brightness_changed = false;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	while (HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin)) {
 80011b8:	e07d      	b.n	80012b6 <Display_Options+0x10a>
		if (!HAL_GPIO_ReadPin(LCD_BTN2_GPIO_Port, LCD_BTN2_Pin)
 80011ba:	2102      	movs	r1, #2
 80011bc:	4844      	ldr	r0, [pc, #272]	@ (80012d0 <Display_Options+0x124>)
 80011be:	f000 fe5b 	bl	8001e78 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d118      	bne.n	80011fa <Display_Options+0x4e>
				&& TIM2->CCR1 < TIM2->ARR - 1000) {
 80011c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011d8:	429a      	cmp	r2, r3
 80011da:	d20e      	bcs.n	80011fa <Display_Options+0x4e>
			HAL_Delay(200);
 80011dc:	20c8      	movs	r0, #200	@ 0xc8
 80011de:	f000 faef 	bl	80017c0 <HAL_Delay>
			TIM2->CCR1 += 1000;
 80011e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011ec:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80011f0:	6353      	str	r3, [r2, #52]	@ 0x34
			brightness_changed = true;
 80011f2:	2301      	movs	r3, #1
 80011f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80011f8:	e01a      	b.n	8001230 <Display_Options+0x84>
		}

		else if (!HAL_GPIO_ReadPin(LCD_BTN1_GPIO_Port, LCD_BTN1_Pin)
 80011fa:	2101      	movs	r1, #1
 80011fc:	4835      	ldr	r0, [pc, #212]	@ (80012d4 <Display_Options+0x128>)
 80011fe:	f000 fe3b 	bl	8001e78 <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d113      	bne.n	8001230 <Display_Options+0x84>
				&& TIM2->CCR1 > 500) {
 8001208:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800120c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800120e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001212:	d90d      	bls.n	8001230 <Display_Options+0x84>
			HAL_Delay(200);
 8001214:	20c8      	movs	r0, #200	@ 0xc8
 8001216:	f000 fad3 	bl	80017c0 <HAL_Delay>
			TIM2->CCR1 -= 1000;
 800121a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800121e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001220:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001224:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001228:	6353      	str	r3, [r2, #52]	@ 0x34
			brightness_changed = true;
 800122a:	2301      	movs	r3, #1
 800122c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		}

		if (brightness_changed) {
 8001230:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <Display_Options+0x96>
			LCD_Clear();
 8001238:	f7ff facc 	bl	80007d4 <LCD_Clear>
			brightness_changed = false;
 800123c:	2300      	movs	r3, #0
 800123e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		}

		brightness = TIM2->CCR1 / 100;
 8001242:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001248:	4a23      	ldr	r2, [pc, #140]	@ (80012d8 <Display_Options+0x12c>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	61fb      	str	r3, [r7, #28]

		if (brightness >= 100) {
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	2b63      	cmp	r3, #99	@ 0x63
 8001256:	dd02      	ble.n	800125e <Display_Options+0xb2>
			y = 48;
 8001258:	2330      	movs	r3, #48	@ 0x30
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
 800125c:	e001      	b.n	8001262 <Display_Options+0xb6>
		}

		else {
			y = 54;
 800125e:	2336      	movs	r3, #54	@ 0x36
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		length = snprintf(NULL, 0, "%d", brightness);
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	4a1d      	ldr	r2, [pc, #116]	@ (80012dc <Display_Options+0x130>)
 8001266:	2100      	movs	r1, #0
 8001268:	2000      	movs	r0, #0
 800126a:	f003 fb85 	bl	8004978 <sniprintf>
 800126e:	61b8      	str	r0, [r7, #24]
		snprintf(str, length + 1, "%d", brightness);
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	3301      	adds	r3, #1
 8001274:	4619      	mov	r1, r3
 8001276:	1d38      	adds	r0, r7, #4
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	4a18      	ldr	r2, [pc, #96]	@ (80012dc <Display_Options+0x130>)
 800127c:	f003 fb7c 	bl	8004978 <sniprintf>

		LCD_WriteString("BRIGHTNESS:", 32, 2);
 8001280:	2202      	movs	r2, #2
 8001282:	2120      	movs	r1, #32
 8001284:	4816      	ldr	r0, [pc, #88]	@ (80012e0 <Display_Options+0x134>)
 8001286:	f7ff fad2 	bl	800082e <LCD_WriteString>
		LCD_WriteString("<", 32, 4);
 800128a:	2204      	movs	r2, #4
 800128c:	2120      	movs	r1, #32
 800128e:	4815      	ldr	r0, [pc, #84]	@ (80012e4 <Display_Options+0x138>)
 8001290:	f7ff facd 	bl	800082e <LCD_WriteString>
		LCD_WriteString(">", 90, 4);
 8001294:	2204      	movs	r2, #4
 8001296:	215a      	movs	r1, #90	@ 0x5a
 8001298:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <Display_Options+0x13c>)
 800129a:	f7ff fac8 	bl	800082e <LCD_WriteString>
		LCD_WriteString(str, y, 4);
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	b2d9      	uxtb	r1, r3
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2204      	movs	r2, #4
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fac1 	bl	800082e <LCD_WriteString>
		LCD_WriteString("%", 69, 4);
 80012ac:	2204      	movs	r2, #4
 80012ae:	2145      	movs	r1, #69	@ 0x45
 80012b0:	480e      	ldr	r0, [pc, #56]	@ (80012ec <Display_Options+0x140>)
 80012b2:	f7ff fabc 	bl	800082e <LCD_WriteString>
	while (HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin)) {
 80012b6:	2108      	movs	r1, #8
 80012b8:	480d      	ldr	r0, [pc, #52]	@ (80012f0 <Display_Options+0x144>)
 80012ba:	f000 fddd 	bl	8001e78 <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f47f af7a 	bne.w	80011ba <Display_Options+0xe>
	}
}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	@ 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	51eb851f 	.word	0x51eb851f
 80012dc:	08005328 	.word	0x08005328
 80012e0:	08005340 	.word	0x08005340
 80012e4:	08005334 	.word	0x08005334
 80012e8:	08005338 	.word	0x08005338
 80012ec:	0800534c 	.word	0x0800534c
 80012f0:	40020800 	.word	0x40020800

080012f4 <Display_Manual_Set>:

void Display_Manual_Set() {
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <Update_Sub_Menu>:

void Update_Sub_Menu() {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	LCD_Clear();
 8001308:	f7ff fa64 	bl	80007d4 <LCD_Clear>

	switch (main_menu_items) {
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <Update_Sub_Menu+0x54>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b03      	cmp	r3, #3
 8001314:	d816      	bhi.n	8001344 <Update_Sub_Menu+0x40>
 8001316:	a201      	add	r2, pc, #4	@ (adr r2, 800131c <Update_Sub_Menu+0x18>)
 8001318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131c:	0800132d 	.word	0x0800132d
 8001320:	08001333 	.word	0x08001333
 8001324:	08001339 	.word	0x08001339
 8001328:	0800133f 	.word	0x0800133f

	case UART_CONFIG:
		Display_UART_Config();
 800132c:	f7ff fea8 	bl	8001080 <Display_UART_Config>
		break;
 8001330:	e008      	b.n	8001344 <Update_Sub_Menu+0x40>

	case ADD_WEIGHT:
		Display_Add_Weight();
 8001332:	f7ff fead 	bl	8001090 <Display_Add_Weight>
		break;
 8001336:	e005      	b.n	8001344 <Update_Sub_Menu+0x40>

	case MANUAL_SET:
		Display_Manual_Set();
 8001338:	f7ff ffdc 	bl	80012f4 <Display_Manual_Set>
		break;
 800133c:	e002      	b.n	8001344 <Update_Sub_Menu+0x40>

	case OPTIONS:
		Display_Options();
 800133e:	f7ff ff35 	bl	80011ac <Display_Options>
		break;
 8001342:	bf00      	nop
	}

	HAL_Delay(10);
 8001344:	200a      	movs	r0, #10
 8001346:	f000 fa3b 	bl	80017c0 <HAL_Delay>
	menu_state = MAIN_MENU;
 800134a:	4b04      	ldr	r3, [pc, #16]	@ (800135c <Update_Sub_Menu+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
	Update_Main_Menu();
 8001350:	f7ff fe48 	bl	8000fe4 <Update_Main_Menu>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2000036d 	.word	0x2000036d
 800135c:	2000036c 	.word	0x2000036c

08001360 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <HAL_MspInit+0x4c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <HAL_MspInit+0x4c>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001374:	6453      	str	r3, [r2, #68]	@ 0x44
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <HAL_MspInit+0x4c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <HAL_MspInit+0x4c>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <HAL_MspInit+0x4c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	@ 0x40
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_MspInit+0x4c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800139e:	2007      	movs	r0, #7
 80013a0:	f000 fb02 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800

080013b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c0:	d10e      	bne.n	80013e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <HAL_TIM_Base_MspInit+0x70>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	4a15      	ldr	r2, [pc, #84]	@ (8001420 <HAL_TIM_Base_MspInit+0x70>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d2:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <HAL_TIM_Base_MspInit+0x70>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013de:	e01a      	b.n	8001416 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001424 <HAL_TIM_Base_MspInit+0x74>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d115      	bne.n	8001416 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <HAL_TIM_Base_MspInit+0x70>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001420 <HAL_TIM_Base_MspInit+0x70>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <HAL_TIM_Base_MspInit+0x70>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	201e      	movs	r0, #30
 800140c:	f000 fad7 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001410:	201e      	movs	r0, #30
 8001412:	f000 faf0 	bl	80019f6 <HAL_NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40000800 	.word	0x40000800

08001428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001448:	d11e      	bne.n	8001488 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <HAL_TIM_MspPostInit+0x68>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <HAL_TIM_MspPostInit+0x68>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	@ 0x30
 800145a:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <HAL_TIM_MspPostInit+0x68>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BL_PWM_Pin;
 8001466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800146a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001478:	2301      	movs	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4804      	ldr	r0, [pc, #16]	@ (8001494 <HAL_TIM_MspPostInit+0x6c>)
 8001484:	f000 fb64 	bl	8001b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	@ 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a1d      	ldr	r2, [pc, #116]	@ (800152c <HAL_UART_MspInit+0x94>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d133      	bne.n	8001522 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <HAL_UART_MspInit+0x98>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001530 <HAL_UART_MspInit+0x98>)
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <HAL_UART_MspInit+0x98>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <HAL_UART_MspInit+0x98>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	4a14      	ldr	r2, [pc, #80]	@ (8001530 <HAL_UART_MspInit+0x98>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_UART_MspInit+0x98>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014f2:	230c      	movs	r3, #12
 80014f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001502:	2307      	movs	r3, #7
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4809      	ldr	r0, [pc, #36]	@ (8001534 <HAL_UART_MspInit+0x9c>)
 800150e:	f000 fb1f 	bl	8001b50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	2026      	movs	r0, #38	@ 0x26
 8001518:	f000 fa51 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800151c:	2026      	movs	r0, #38	@ 0x26
 800151e:	f000 fa6a 	bl	80019f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	@ 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40004400 	.word	0x40004400
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <NMI_Handler+0x4>

08001540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <MemManage_Handler+0x4>

08001550 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <UsageFault_Handler+0x4>

08001560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158e:	f000 f8f7 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}

08001596 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 800159a:	2001      	movs	r0, #1
 800159c:	f000 fc9e 	bl	8001edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_DOWN_Pin);
 80015a8:	2002      	movs	r0, #2
 80015aa:	f000 fc97 	bl	8001edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_UP_Pin);
 80015b6:	2004      	movs	r0, #4
 80015b8:	f000 fc90 	bl	8001edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 80015c4:	2008      	movs	r0, #8
 80015c6:	f000 fc89 	bl	8001edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <TIM4_IRQHandler+0x10>)
 80015d6:	f001 fc63 	bl	8002ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002d0 	.word	0x200002d0

080015e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e8:	4802      	ldr	r0, [pc, #8]	@ (80015f4 <USART2_IRQHandler+0x10>)
 80015ea:	f002 faf7 	bl	8003bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000318 	.word	0x20000318

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	@ (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	@ (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	@ (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f003 f9e2 	bl	80049f0 <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	@ (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	@ (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20020000 	.word	0x20020000
 8001658:	00000400 	.word	0x00000400
 800165c:	20000370 	.word	0x20000370
 8001660:	200004c0 	.word	0x200004c0

08001664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	@ (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800168c:	f7ff ffea 	bl	8001664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	@ (80016c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	@ (80016d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016b6:	f003 f9a1 	bl	80049fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7ff fa23 	bl	8000b04 <main>
  bx  lr    
 80016be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 80016cc:	080053ac 	.word	0x080053ac
  ldr r2, =_sbss
 80016d0:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 80016d4:	200004c0 	.word	0x200004c0

080016d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e0:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <HAL_Init+0x40>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <HAL_Init+0x40>)
 80016f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	@ (800171c <HAL_Init+0x40>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f000 f94f 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f808 	bl	8001720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001710:	f7ff fe26 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_InitTick+0x54>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_InitTick+0x58>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001736:	fbb3 f3f1 	udiv	r3, r3, r1
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f967 	bl	8001a12 <HAL_SYSTICK_Config>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e00e      	b.n	800176c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d80a      	bhi.n	800176a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001754:	2200      	movs	r2, #0
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800175c:	f000 f92f 	bl	80019be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	4a06      	ldr	r2, [pc, #24]	@ (800177c <HAL_InitTick+0x5c>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000210 	.word	0x20000210
 8001778:	20000218 	.word	0x20000218
 800177c:	20000214 	.word	0x20000214

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_IncTick+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x24>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <HAL_IncTick+0x24>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000218 	.word	0x20000218
 80017a4:	20000374 	.word	0x20000374

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000374 	.word	0x20000374

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff ffee 	bl	80017a8 <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017d8:	d005      	beq.n	80017e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017da:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <HAL_Delay+0x44>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e6:	bf00      	nop
 80017e8:	f7ff ffde 	bl	80017a8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d8f7      	bhi.n	80017e8 <HAL_Delay+0x28>
  {
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000218 	.word	0x20000218

08001808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	@ (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4907      	ldr	r1, [pc, #28]	@ (80018a4 <__NVIC_EnableIRQ+0x38>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	@ (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	@ (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	@ 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
         );
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	@ 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001988:	f7ff ff8e 	bl	80018a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff29 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff3e 	bl	8001850 <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff8e 	bl	80018fc <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5d 	bl	80018a8 <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff31 	bl	800186c <__NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffa2 	bl	8001964 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff feb6 	bl	80017a8 <HAL_GetTick>
 8001a3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d008      	beq.n	8001a5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2280      	movs	r2, #128	@ 0x80
 8001a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e052      	b.n	8001b02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0216 	bic.w	r2, r2, #22
 8001a6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d103      	bne.n	8001a8c <HAL_DMA_Abort+0x62>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0208 	bic.w	r2, r2, #8
 8001a9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aac:	e013      	b.n	8001ad6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aae:	f7ff fe7b 	bl	80017a8 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d90c      	bls.n	8001ad6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e015      	b.n	8001b02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1e4      	bne.n	8001aae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae8:	223f      	movs	r2, #63	@ 0x3f
 8001aea:	409a      	lsls	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d004      	beq.n	8001b28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e00c      	b.n	8001b42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2205      	movs	r2, #5
 8001b2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0201 	bic.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	@ 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	e165      	b.n	8001e38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	f040 8154 	bne.w	8001e32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d005      	beq.n	8001ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d130      	bne.n	8001c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 0201 	and.w	r2, r3, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d017      	beq.n	8001c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d123      	bne.n	8001c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	08da      	lsrs	r2, r3, #3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3208      	adds	r2, #8
 8001c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	220f      	movs	r2, #15
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3208      	adds	r2, #8
 8001c8e:	69b9      	ldr	r1, [r7, #24]
 8001c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80ae 	beq.w	8001e32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b5d      	ldr	r3, [pc, #372]	@ (8001e50 <HAL_GPIO_Init+0x300>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	4a5c      	ldr	r2, [pc, #368]	@ (8001e50 <HAL_GPIO_Init+0x300>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e50 <HAL_GPIO_Init+0x300>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf2:	4a58      	ldr	r2, [pc, #352]	@ (8001e54 <HAL_GPIO_Init+0x304>)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4f      	ldr	r2, [pc, #316]	@ (8001e58 <HAL_GPIO_Init+0x308>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d025      	beq.n	8001d6a <HAL_GPIO_Init+0x21a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4e      	ldr	r2, [pc, #312]	@ (8001e5c <HAL_GPIO_Init+0x30c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01f      	beq.n	8001d66 <HAL_GPIO_Init+0x216>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4d      	ldr	r2, [pc, #308]	@ (8001e60 <HAL_GPIO_Init+0x310>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x212>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4c      	ldr	r2, [pc, #304]	@ (8001e64 <HAL_GPIO_Init+0x314>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x20e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4b      	ldr	r2, [pc, #300]	@ (8001e68 <HAL_GPIO_Init+0x318>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x20a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4a      	ldr	r2, [pc, #296]	@ (8001e6c <HAL_GPIO_Init+0x31c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x206>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a49      	ldr	r2, [pc, #292]	@ (8001e70 <HAL_GPIO_Init+0x320>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x202>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e00c      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e00a      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d56:	2305      	movs	r3, #5
 8001d58:	e008      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e004      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_GPIO_Init+0x21c>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	4093      	lsls	r3, r2
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d7c:	4935      	ldr	r1, [pc, #212]	@ (8001e54 <HAL_GPIO_Init+0x304>)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e74 <HAL_GPIO_Init+0x324>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dae:	4a31      	ldr	r2, [pc, #196]	@ (8001e74 <HAL_GPIO_Init+0x324>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e74 <HAL_GPIO_Init+0x324>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd8:	4a26      	ldr	r2, [pc, #152]	@ (8001e74 <HAL_GPIO_Init+0x324>)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dde:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <HAL_GPIO_Init+0x324>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e02:	4a1c      	ldr	r2, [pc, #112]	@ (8001e74 <HAL_GPIO_Init+0x324>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <HAL_GPIO_Init+0x324>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e2c:	4a11      	ldr	r2, [pc, #68]	@ (8001e74 <HAL_GPIO_Init+0x324>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3301      	adds	r3, #1
 8001e36:	61fb      	str	r3, [r7, #28]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	2b0f      	cmp	r3, #15
 8001e3c:	f67f ae96 	bls.w	8001b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3724      	adds	r7, #36	@ 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40013800 	.word	0x40013800
 8001e58:	40020000 	.word	0x40020000
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40020800 	.word	0x40020800
 8001e64:	40020c00 	.word	0x40020c00
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40021400 	.word	0x40021400
 8001e70:	40021800 	.word	0x40021800
 8001e74:	40013c00 	.word	0x40013c00

08001e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	887b      	ldrh	r3, [r7, #2]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e001      	b.n	8001e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec4:	e003      	b.n	8001ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	041a      	lsls	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	619a      	str	r2, [r3, #24]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ef2:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fd44 	bl	8000988 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40013c00 	.word	0x40013c00

08001f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0cc      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f20:	4b68      	ldr	r3, [pc, #416]	@ (80020c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 030f 	and.w	r3, r3, #15
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d90c      	bls.n	8001f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b65      	ldr	r3, [pc, #404]	@ (80020c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	4b63      	ldr	r3, [pc, #396]	@ (80020c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0b8      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d020      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f60:	4b59      	ldr	r3, [pc, #356]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a58      	ldr	r2, [pc, #352]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0308 	and.w	r3, r3, #8
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f78:	4b53      	ldr	r3, [pc, #332]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	4a52      	ldr	r2, [pc, #328]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f84:	4b50      	ldr	r3, [pc, #320]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	494d      	ldr	r1, [pc, #308]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d044      	beq.n	800202c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	4b47      	ldr	r3, [pc, #284]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d119      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e07f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d003      	beq.n	8001fca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fca:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e06f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	4b3b      	ldr	r3, [pc, #236]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e067      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fea:	4b37      	ldr	r3, [pc, #220]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4934      	ldr	r1, [pc, #208]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7ff fbd4 	bl	80017a8 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7ff fbd0 	bl	80017a8 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e04f      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	4b2b      	ldr	r3, [pc, #172]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 020c 	and.w	r2, r3, #12
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	429a      	cmp	r2, r3
 800202a:	d1eb      	bne.n	8002004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202c:	4b25      	ldr	r3, [pc, #148]	@ (80020c4 <HAL_RCC_ClockConfig+0x1b8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d20c      	bcs.n	8002054 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203a:	4b22      	ldr	r3, [pc, #136]	@ (80020c4 <HAL_RCC_ClockConfig+0x1b8>)
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002042:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d001      	beq.n	8002054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e032      	b.n	80020ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002060:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4916      	ldr	r1, [pc, #88]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800207e:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	490e      	ldr	r1, [pc, #56]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002092:	f000 f855 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8002096:	4602      	mov	r2, r0
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	490a      	ldr	r1, [pc, #40]	@ (80020cc <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	5ccb      	ldrb	r3, [r1, r3]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a09      	ldr	r2, [pc, #36]	@ (80020d0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <HAL_RCC_ClockConfig+0x1c8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fb34 	bl	8001720 <HAL_InitTick>

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023c00 	.word	0x40023c00
 80020c8:	40023800 	.word	0x40023800
 80020cc:	08005350 	.word	0x08005350
 80020d0:	20000210 	.word	0x20000210
 80020d4:	20000214 	.word	0x20000214

080020d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <HAL_RCC_GetHCLKFreq+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000210 	.word	0x20000210

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0a9b      	lsrs	r3, r3, #10
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4903      	ldr	r1, [pc, #12]	@ (8002114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	08005360 	.word	0x08005360

08002118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800211c:	f7ff ffdc 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 8002120:	4602      	mov	r2, r0
 8002122:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0b5b      	lsrs	r3, r3, #13
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4903      	ldr	r1, [pc, #12]	@ (800213c <HAL_RCC_GetPCLK2Freq+0x24>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40023800 	.word	0x40023800
 800213c:	08005360 	.word	0x08005360

08002140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002144:	b0ae      	sub	sp, #184	@ 0xb8
 8002146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002166:	4bcb      	ldr	r3, [pc, #812]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x354>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b0c      	cmp	r3, #12
 8002170:	f200 8206 	bhi.w	8002580 <HAL_RCC_GetSysClockFreq+0x440>
 8002174:	a201      	add	r2, pc, #4	@ (adr r2, 800217c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217a:	bf00      	nop
 800217c:	080021b1 	.word	0x080021b1
 8002180:	08002581 	.word	0x08002581
 8002184:	08002581 	.word	0x08002581
 8002188:	08002581 	.word	0x08002581
 800218c:	080021b9 	.word	0x080021b9
 8002190:	08002581 	.word	0x08002581
 8002194:	08002581 	.word	0x08002581
 8002198:	08002581 	.word	0x08002581
 800219c:	080021c1 	.word	0x080021c1
 80021a0:	08002581 	.word	0x08002581
 80021a4:	08002581 	.word	0x08002581
 80021a8:	08002581 	.word	0x08002581
 80021ac:	080023b1 	.word	0x080023b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4bb9      	ldr	r3, [pc, #740]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x358>)
 80021b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021b6:	e1e7      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b8:	4bb8      	ldr	r3, [pc, #736]	@ (800249c <HAL_RCC_GetSysClockFreq+0x35c>)
 80021ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021be:	e1e3      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c0:	4bb4      	ldr	r3, [pc, #720]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x354>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021cc:	4bb1      	ldr	r3, [pc, #708]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d071      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d8:	4bae      	ldr	r3, [pc, #696]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x354>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	099b      	lsrs	r3, r3, #6
 80021de:	2200      	movs	r2, #0
 80021e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80021e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80021fe:	4622      	mov	r2, r4
 8002200:	462b      	mov	r3, r5
 8002202:	f04f 0000 	mov.w	r0, #0
 8002206:	f04f 0100 	mov.w	r1, #0
 800220a:	0159      	lsls	r1, r3, #5
 800220c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002210:	0150      	lsls	r0, r2, #5
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4621      	mov	r1, r4
 8002218:	1a51      	subs	r1, r2, r1
 800221a:	6439      	str	r1, [r7, #64]	@ 0x40
 800221c:	4629      	mov	r1, r5
 800221e:	eb63 0301 	sbc.w	r3, r3, r1
 8002222:	647b      	str	r3, [r7, #68]	@ 0x44
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002230:	4649      	mov	r1, r9
 8002232:	018b      	lsls	r3, r1, #6
 8002234:	4641      	mov	r1, r8
 8002236:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800223a:	4641      	mov	r1, r8
 800223c:	018a      	lsls	r2, r1, #6
 800223e:	4641      	mov	r1, r8
 8002240:	1a51      	subs	r1, r2, r1
 8002242:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002244:	4649      	mov	r1, r9
 8002246:	eb63 0301 	sbc.w	r3, r3, r1
 800224a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002258:	4649      	mov	r1, r9
 800225a:	00cb      	lsls	r3, r1, #3
 800225c:	4641      	mov	r1, r8
 800225e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002262:	4641      	mov	r1, r8
 8002264:	00ca      	lsls	r2, r1, #3
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	4603      	mov	r3, r0
 800226c:	4622      	mov	r2, r4
 800226e:	189b      	adds	r3, r3, r2
 8002270:	633b      	str	r3, [r7, #48]	@ 0x30
 8002272:	462b      	mov	r3, r5
 8002274:	460a      	mov	r2, r1
 8002276:	eb42 0303 	adc.w	r3, r2, r3
 800227a:	637b      	str	r3, [r7, #52]	@ 0x34
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002288:	4629      	mov	r1, r5
 800228a:	024b      	lsls	r3, r1, #9
 800228c:	4621      	mov	r1, r4
 800228e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002292:	4621      	mov	r1, r4
 8002294:	024a      	lsls	r2, r1, #9
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800229e:	2200      	movs	r2, #0
 80022a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80022a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80022a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80022ac:	f7fe f808 	bl	80002c0 <__aeabi_uldivmod>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4613      	mov	r3, r2
 80022b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022ba:	e067      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022bc:	4b75      	ldr	r3, [pc, #468]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x354>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	2200      	movs	r2, #0
 80022c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80022c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80022cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022d6:	2300      	movs	r3, #0
 80022d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80022de:	4622      	mov	r2, r4
 80022e0:	462b      	mov	r3, r5
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	0159      	lsls	r1, r3, #5
 80022ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f0:	0150      	lsls	r0, r2, #5
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4621      	mov	r1, r4
 80022f8:	1a51      	subs	r1, r2, r1
 80022fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80022fc:	4629      	mov	r1, r5
 80022fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002310:	4649      	mov	r1, r9
 8002312:	018b      	lsls	r3, r1, #6
 8002314:	4641      	mov	r1, r8
 8002316:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800231a:	4641      	mov	r1, r8
 800231c:	018a      	lsls	r2, r1, #6
 800231e:	4641      	mov	r1, r8
 8002320:	ebb2 0a01 	subs.w	sl, r2, r1
 8002324:	4649      	mov	r1, r9
 8002326:	eb63 0b01 	sbc.w	fp, r3, r1
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002336:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800233a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800233e:	4692      	mov	sl, r2
 8002340:	469b      	mov	fp, r3
 8002342:	4623      	mov	r3, r4
 8002344:	eb1a 0303 	adds.w	r3, sl, r3
 8002348:	623b      	str	r3, [r7, #32]
 800234a:	462b      	mov	r3, r5
 800234c:	eb4b 0303 	adc.w	r3, fp, r3
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800235e:	4629      	mov	r1, r5
 8002360:	028b      	lsls	r3, r1, #10
 8002362:	4621      	mov	r1, r4
 8002364:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002368:	4621      	mov	r1, r4
 800236a:	028a      	lsls	r2, r1, #10
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002374:	2200      	movs	r2, #0
 8002376:	673b      	str	r3, [r7, #112]	@ 0x70
 8002378:	677a      	str	r2, [r7, #116]	@ 0x74
 800237a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800237e:	f7fd ff9f 	bl	80002c0 <__aeabi_uldivmod>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4613      	mov	r3, r2
 8002388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800238c:	4b41      	ldr	r3, [pc, #260]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x354>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800239e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023ae:	e0eb      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b0:	4b38      	ldr	r3, [pc, #224]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x354>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023bc:	4b35      	ldr	r3, [pc, #212]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x354>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d06b      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c8:	4b32      	ldr	r3, [pc, #200]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	2200      	movs	r2, #0
 80023d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023da:	663b      	str	r3, [r7, #96]	@ 0x60
 80023dc:	2300      	movs	r3, #0
 80023de:	667b      	str	r3, [r7, #100]	@ 0x64
 80023e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80023e4:	4622      	mov	r2, r4
 80023e6:	462b      	mov	r3, r5
 80023e8:	f04f 0000 	mov.w	r0, #0
 80023ec:	f04f 0100 	mov.w	r1, #0
 80023f0:	0159      	lsls	r1, r3, #5
 80023f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023f6:	0150      	lsls	r0, r2, #5
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4621      	mov	r1, r4
 80023fe:	1a51      	subs	r1, r2, r1
 8002400:	61b9      	str	r1, [r7, #24]
 8002402:	4629      	mov	r1, r5
 8002404:	eb63 0301 	sbc.w	r3, r3, r1
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002416:	4659      	mov	r1, fp
 8002418:	018b      	lsls	r3, r1, #6
 800241a:	4651      	mov	r1, sl
 800241c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002420:	4651      	mov	r1, sl
 8002422:	018a      	lsls	r2, r1, #6
 8002424:	4651      	mov	r1, sl
 8002426:	ebb2 0801 	subs.w	r8, r2, r1
 800242a:	4659      	mov	r1, fp
 800242c:	eb63 0901 	sbc.w	r9, r3, r1
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800243c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002440:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002444:	4690      	mov	r8, r2
 8002446:	4699      	mov	r9, r3
 8002448:	4623      	mov	r3, r4
 800244a:	eb18 0303 	adds.w	r3, r8, r3
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	462b      	mov	r3, r5
 8002452:	eb49 0303 	adc.w	r3, r9, r3
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002464:	4629      	mov	r1, r5
 8002466:	024b      	lsls	r3, r1, #9
 8002468:	4621      	mov	r1, r4
 800246a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800246e:	4621      	mov	r1, r4
 8002470:	024a      	lsls	r2, r1, #9
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800247a:	2200      	movs	r2, #0
 800247c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800247e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002480:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002484:	f7fd ff1c 	bl	80002c0 <__aeabi_uldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4613      	mov	r3, r2
 800248e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002492:	e065      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x420>
 8002494:	40023800 	.word	0x40023800
 8002498:	00f42400 	.word	0x00f42400
 800249c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x458>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	099b      	lsrs	r3, r3, #6
 80024a6:	2200      	movs	r2, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	4611      	mov	r1, r2
 80024ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80024b2:	2300      	movs	r3, #0
 80024b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80024b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80024ba:	4642      	mov	r2, r8
 80024bc:	464b      	mov	r3, r9
 80024be:	f04f 0000 	mov.w	r0, #0
 80024c2:	f04f 0100 	mov.w	r1, #0
 80024c6:	0159      	lsls	r1, r3, #5
 80024c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024cc:	0150      	lsls	r0, r2, #5
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4641      	mov	r1, r8
 80024d4:	1a51      	subs	r1, r2, r1
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	4649      	mov	r1, r9
 80024da:	eb63 0301 	sbc.w	r3, r3, r1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024ec:	4659      	mov	r1, fp
 80024ee:	018b      	lsls	r3, r1, #6
 80024f0:	4651      	mov	r1, sl
 80024f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024f6:	4651      	mov	r1, sl
 80024f8:	018a      	lsls	r2, r1, #6
 80024fa:	4651      	mov	r1, sl
 80024fc:	1a54      	subs	r4, r2, r1
 80024fe:	4659      	mov	r1, fp
 8002500:	eb63 0501 	sbc.w	r5, r3, r1
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	00eb      	lsls	r3, r5, #3
 800250e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002512:	00e2      	lsls	r2, r4, #3
 8002514:	4614      	mov	r4, r2
 8002516:	461d      	mov	r5, r3
 8002518:	4643      	mov	r3, r8
 800251a:	18e3      	adds	r3, r4, r3
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	464b      	mov	r3, r9
 8002520:	eb45 0303 	adc.w	r3, r5, r3
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002532:	4629      	mov	r1, r5
 8002534:	028b      	lsls	r3, r1, #10
 8002536:	4621      	mov	r1, r4
 8002538:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800253c:	4621      	mov	r1, r4
 800253e:	028a      	lsls	r2, r1, #10
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002548:	2200      	movs	r2, #0
 800254a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800254c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800254e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002552:	f7fd feb5 	bl	80002c0 <__aeabi_uldivmod>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4613      	mov	r3, r2
 800255c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002560:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x458>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	0f1b      	lsrs	r3, r3, #28
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800256e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002572:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800257e:	e003      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002586:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800258c:	4618      	mov	r0, r3
 800258e:	37b8      	adds	r7, #184	@ 0xb8
 8002590:	46bd      	mov	sp, r7
 8002592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	00f42400 	.word	0x00f42400

080025a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e28d      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8083 	beq.w	80026c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025c0:	4b94      	ldr	r3, [pc, #592]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d019      	beq.n	8002600 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025cc:	4b91      	ldr	r3, [pc, #580]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025e4:	d00c      	beq.n	8002600 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025ee:	2b0c      	cmp	r3, #12
 80025f0:	d112      	bne.n	8002618 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f2:	4b88      	ldr	r3, [pc, #544]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025fe:	d10b      	bne.n	8002618 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	4b84      	ldr	r3, [pc, #528]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d05b      	beq.n	80026c4 <HAL_RCC_OscConfig+0x124>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d157      	bne.n	80026c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e25a      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002620:	d106      	bne.n	8002630 <HAL_RCC_OscConfig+0x90>
 8002622:	4b7c      	ldr	r3, [pc, #496]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a7b      	ldr	r2, [pc, #492]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e01d      	b.n	800266c <HAL_RCC_OscConfig+0xcc>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0xb4>
 800263a:	4b76      	ldr	r3, [pc, #472]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a75      	ldr	r2, [pc, #468]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	4b73      	ldr	r3, [pc, #460]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a72      	ldr	r2, [pc, #456]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0xcc>
 8002654:	4b6f      	ldr	r3, [pc, #444]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a6e      	ldr	r2, [pc, #440]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 800265a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b6c      	ldr	r3, [pc, #432]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a6b      	ldr	r2, [pc, #428]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800266a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d013      	beq.n	800269c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7ff f898 	bl	80017a8 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800267c:	f7ff f894 	bl	80017a8 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	@ 0x64
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e21f      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b61      	ldr	r3, [pc, #388]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0xdc>
 800269a:	e014      	b.n	80026c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7ff f884 	bl	80017a8 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7ff f880 	bl	80017a8 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	@ 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e20b      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b6:	4b57      	ldr	r3, [pc, #348]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x104>
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d06f      	beq.n	80027b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026d2:	4b50      	ldr	r3, [pc, #320]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d017      	beq.n	800270e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026de:	4b4d      	ldr	r3, [pc, #308]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d105      	bne.n	80026f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026f6:	4b47      	ldr	r3, [pc, #284]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d11c      	bne.n	800273c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002702:	4b44      	ldr	r3, [pc, #272]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d116      	bne.n	800273c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	4b41      	ldr	r3, [pc, #260]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_RCC_OscConfig+0x186>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d001      	beq.n	8002726 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e1d3      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002726:	4b3b      	ldr	r3, [pc, #236]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4937      	ldr	r1, [pc, #220]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273a:	e03a      	b.n	80027b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d020      	beq.n	8002786 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002744:	4b34      	ldr	r3, [pc, #208]	@ (8002818 <HAL_RCC_OscConfig+0x278>)
 8002746:	2201      	movs	r2, #1
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7ff f82d 	bl	80017a8 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002752:	f7ff f829 	bl	80017a8 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e1b4      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	4b2b      	ldr	r3, [pc, #172]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b28      	ldr	r3, [pc, #160]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4925      	ldr	r1, [pc, #148]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
 8002784:	e015      	b.n	80027b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002786:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <HAL_RCC_OscConfig+0x278>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7ff f80c 	bl	80017a8 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002794:	f7ff f808 	bl	80017a8 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e193      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d036      	beq.n	800282c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d016      	beq.n	80027f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <HAL_RCC_OscConfig+0x27c>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7fe ffec 	bl	80017a8 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d4:	f7fe ffe8 	bl	80017a8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e173      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <HAL_RCC_OscConfig+0x274>)
 80027e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x234>
 80027f2:	e01b      	b.n	800282c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f4:	4b09      	ldr	r3, [pc, #36]	@ (800281c <HAL_RCC_OscConfig+0x27c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe ffd5 	bl	80017a8 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002800:	e00e      	b.n	8002820 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002802:	f7fe ffd1 	bl	80017a8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d907      	bls.n	8002820 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e15c      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
 8002814:	40023800 	.word	0x40023800
 8002818:	42470000 	.word	0x42470000
 800281c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b8a      	ldr	r3, [pc, #552]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 8002822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ea      	bne.n	8002802 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8097 	beq.w	8002968 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b83      	ldr	r3, [pc, #524]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	4a7e      	ldr	r2, [pc, #504]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002858:	6413      	str	r3, [r2, #64]	@ 0x40
 800285a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b79      	ldr	r3, [pc, #484]	@ (8002a50 <HAL_RCC_OscConfig+0x4b0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d118      	bne.n	80028a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002876:	4b76      	ldr	r3, [pc, #472]	@ (8002a50 <HAL_RCC_OscConfig+0x4b0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a75      	ldr	r2, [pc, #468]	@ (8002a50 <HAL_RCC_OscConfig+0x4b0>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7fe ff91 	bl	80017a8 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7fe ff8d 	bl	80017a8 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e118      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a50 <HAL_RCC_OscConfig+0x4b0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x31e>
 80028b0:	4b66      	ldr	r3, [pc, #408]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a65      	ldr	r2, [pc, #404]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80028bc:	e01c      	b.n	80028f8 <HAL_RCC_OscConfig+0x358>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x340>
 80028c6:	4b61      	ldr	r3, [pc, #388]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ca:	4a60      	ldr	r2, [pc, #384]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 80028cc:	f043 0304 	orr.w	r3, r3, #4
 80028d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80028d2:	4b5e      	ldr	r3, [pc, #376]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d6:	4a5d      	ldr	r2, [pc, #372]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0x358>
 80028e0:	4b5a      	ldr	r3, [pc, #360]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	4a59      	ldr	r2, [pc, #356]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 80028e6:	f023 0301 	bic.w	r3, r3, #1
 80028ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ec:	4b57      	ldr	r3, [pc, #348]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f0:	4a56      	ldr	r2, [pc, #344]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 80028f2:	f023 0304 	bic.w	r3, r3, #4
 80028f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe ff52 	bl	80017a8 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002906:	e00a      	b.n	800291e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f7fe ff4e 	bl	80017a8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e0d7      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0ee      	beq.n	8002908 <HAL_RCC_OscConfig+0x368>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe ff3c 	bl	80017a8 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002932:	e00a      	b.n	800294a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7fe ff38 	bl	80017a8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e0c1      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294a:	4b40      	ldr	r3, [pc, #256]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1ee      	bne.n	8002934 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	4a3a      	ldr	r2, [pc, #232]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 8002962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002966:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80ad 	beq.w	8002acc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002972:	4b36      	ldr	r3, [pc, #216]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b08      	cmp	r3, #8
 800297c:	d060      	beq.n	8002a40 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d145      	bne.n	8002a12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	4b33      	ldr	r3, [pc, #204]	@ (8002a54 <HAL_RCC_OscConfig+0x4b4>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe ff0c 	bl	80017a8 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe ff08 	bl	80017a8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e093      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a6:	4b29      	ldr	r3, [pc, #164]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	085b      	lsrs	r3, r3, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	071b      	lsls	r3, r3, #28
 80029de:	491b      	ldr	r1, [pc, #108]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <HAL_RCC_OscConfig+0x4b4>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fe fedd 	bl	80017a8 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe fed9 	bl	80017a8 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e064      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x452>
 8002a10:	e05c      	b.n	8002acc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4b10      	ldr	r3, [pc, #64]	@ (8002a54 <HAL_RCC_OscConfig+0x4b4>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe fec6 	bl	80017a8 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe fec2 	bl	80017a8 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e04d      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_RCC_OscConfig+0x4ac>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x480>
 8002a3e:	e045      	b.n	8002acc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e040      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40007000 	.word	0x40007000
 8002a54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a58:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad8 <HAL_RCC_OscConfig+0x538>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d030      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d129      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d122      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a88:	4013      	ands	r3, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d119      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d10f      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800

08002adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e041      	b.n	8002b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe fc54 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3304      	adds	r3, #4
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	f000 fc62 	bl	80033e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d001      	beq.n	8002b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e04e      	b.n	8002c32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	@ (8002c40 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d022      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x80>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bbe:	d01d      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x80>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c44 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d018      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x80>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1e      	ldr	r2, [pc, #120]	@ (8002c48 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d013      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x80>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c4c <HAL_TIM_Base_Start_IT+0xd0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00e      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x80>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c50 <HAL_TIM_Base_Start_IT+0xd4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x80>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a19      	ldr	r2, [pc, #100]	@ (8002c54 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x80>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a18      	ldr	r2, [pc, #96]	@ (8002c58 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d111      	bne.n	8002c20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d010      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1e:	e007      	b.n	8002c30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40010000 	.word	0x40010000
 8002c44:	40000400 	.word	0x40000400
 8002c48:	40000800 	.word	0x40000800
 8002c4c:	40000c00 	.word	0x40000c00
 8002c50:	40010400 	.word	0x40010400
 8002c54:	40014000 	.word	0x40014000
 8002c58:	40001800 	.word	0x40001800

08002c5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e041      	b.n	8002cf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f839 	bl	8002cfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3304      	adds	r3, #4
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	f000 fba2 	bl	80033e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_TIM_PWM_Start+0x24>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e022      	b.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d109      	bne.n	8002d4e <HAL_TIM_PWM_Start+0x3e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	bf14      	ite	ne
 8002d46:	2301      	movne	r3, #1
 8002d48:	2300      	moveq	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	e015      	b.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d109      	bne.n	8002d68 <HAL_TIM_PWM_Start+0x58>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	e008      	b.n	8002d7a <HAL_TIM_PWM_Start+0x6a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	bf14      	ite	ne
 8002d74:	2301      	movne	r3, #1
 8002d76:	2300      	moveq	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07c      	b.n	8002e7c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_PWM_Start+0x82>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d90:	e013      	b.n	8002dba <HAL_TIM_PWM_Start+0xaa>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_PWM_Start+0x92>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002da0:	e00b      	b.n	8002dba <HAL_TIM_PWM_Start+0xaa>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_PWM_Start+0xa2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002db0:	e003      	b.n	8002dba <HAL_TIM_PWM_Start+0xaa>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	6839      	ldr	r1, [r7, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fe04 	bl	80039d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002e84 <HAL_TIM_PWM_Start+0x174>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d004      	beq.n	8002ddc <HAL_TIM_PWM_Start+0xcc>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8002e88 <HAL_TIM_PWM_Start+0x178>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d101      	bne.n	8002de0 <HAL_TIM_PWM_Start+0xd0>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <HAL_TIM_PWM_Start+0xd2>
 8002de0:	2300      	movs	r3, #0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002df4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a22      	ldr	r2, [pc, #136]	@ (8002e84 <HAL_TIM_PWM_Start+0x174>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d022      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x136>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e08:	d01d      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x136>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002e8c <HAL_TIM_PWM_Start+0x17c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d018      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x136>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <HAL_TIM_PWM_Start+0x180>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x136>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1c      	ldr	r2, [pc, #112]	@ (8002e94 <HAL_TIM_PWM_Start+0x184>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00e      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x136>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a16      	ldr	r2, [pc, #88]	@ (8002e88 <HAL_TIM_PWM_Start+0x178>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d009      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x136>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a18      	ldr	r2, [pc, #96]	@ (8002e98 <HAL_TIM_PWM_Start+0x188>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d004      	beq.n	8002e46 <HAL_TIM_PWM_Start+0x136>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a16      	ldr	r2, [pc, #88]	@ (8002e9c <HAL_TIM_PWM_Start+0x18c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d111      	bne.n	8002e6a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b06      	cmp	r3, #6
 8002e56:	d010      	beq.n	8002e7a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e68:	e007      	b.n	8002e7a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40010000 	.word	0x40010000
 8002e88:	40010400 	.word	0x40010400
 8002e8c:	40000400 	.word	0x40000400
 8002e90:	40000800 	.word	0x40000800
 8002e94:	40000c00 	.word	0x40000c00
 8002e98:	40014000 	.word	0x40014000
 8002e9c:	40001800 	.word	0x40001800

08002ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d020      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0202 	mvn.w	r2, #2
 8002ed4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa5b 	bl	80033a6 <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa4d 	bl	8003392 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa5e 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d020      	beq.n	8002f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0204 	mvn.w	r2, #4
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fa35 	bl	80033a6 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fa27 	bl	8003392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fa38 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d020      	beq.n	8002f9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01b      	beq.n	8002f9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0208 	mvn.w	r2, #8
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2204      	movs	r2, #4
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fa0f 	bl	80033a6 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa01 	bl	8003392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fa12 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d020      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0210 	mvn.w	r2, #16
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f9e9 	bl	80033a6 <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f9db 	bl	8003392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f9ec 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00c      	beq.n	800300c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0201 	mvn.w	r2, #1
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd fd28 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00c      	beq.n	8003030 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fd7c 	bl	8003b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f9bd 	bl	80033ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00c      	beq.n	8003078 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0220 	mvn.w	r2, #32
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fd4e 	bl	8003b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800309a:	2302      	movs	r3, #2
 800309c:	e0ae      	b.n	80031fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b0c      	cmp	r3, #12
 80030aa:	f200 809f 	bhi.w	80031ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030ae:	a201      	add	r2, pc, #4	@ (adr r2, 80030b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b4:	080030e9 	.word	0x080030e9
 80030b8:	080031ed 	.word	0x080031ed
 80030bc:	080031ed 	.word	0x080031ed
 80030c0:	080031ed 	.word	0x080031ed
 80030c4:	08003129 	.word	0x08003129
 80030c8:	080031ed 	.word	0x080031ed
 80030cc:	080031ed 	.word	0x080031ed
 80030d0:	080031ed 	.word	0x080031ed
 80030d4:	0800316b 	.word	0x0800316b
 80030d8:	080031ed 	.word	0x080031ed
 80030dc:	080031ed 	.word	0x080031ed
 80030e0:	080031ed 	.word	0x080031ed
 80030e4:	080031ab 	.word	0x080031ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fa24 	bl	800353c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0208 	orr.w	r2, r2, #8
 8003102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0204 	bic.w	r2, r2, #4
 8003112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6999      	ldr	r1, [r3, #24]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	619a      	str	r2, [r3, #24]
      break;
 8003126:	e064      	b.n	80031f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fa74 	bl	800361c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699a      	ldr	r2, [r3, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6999      	ldr	r1, [r3, #24]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	021a      	lsls	r2, r3, #8
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	619a      	str	r2, [r3, #24]
      break;
 8003168:	e043      	b.n	80031f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fac9 	bl	8003708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0208 	orr.w	r2, r2, #8
 8003184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0204 	bic.w	r2, r2, #4
 8003194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69d9      	ldr	r1, [r3, #28]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	61da      	str	r2, [r3, #28]
      break;
 80031a8:	e023      	b.n	80031f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fb1d 	bl	80037f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69d9      	ldr	r1, [r3, #28]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	021a      	lsls	r2, r3, #8
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	61da      	str	r2, [r3, #28]
      break;
 80031ea:	e002      	b.n	80031f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	75fb      	strb	r3, [r7, #23]
      break;
 80031f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_TIM_ConfigClockSource+0x1c>
 800321c:	2302      	movs	r3, #2
 800321e:	e0b4      	b.n	800338a <HAL_TIM_ConfigClockSource+0x186>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800323e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003258:	d03e      	beq.n	80032d8 <HAL_TIM_ConfigClockSource+0xd4>
 800325a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800325e:	f200 8087 	bhi.w	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003266:	f000 8086 	beq.w	8003376 <HAL_TIM_ConfigClockSource+0x172>
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800326e:	d87f      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b70      	cmp	r3, #112	@ 0x70
 8003272:	d01a      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0xa6>
 8003274:	2b70      	cmp	r3, #112	@ 0x70
 8003276:	d87b      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b60      	cmp	r3, #96	@ 0x60
 800327a:	d050      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x11a>
 800327c:	2b60      	cmp	r3, #96	@ 0x60
 800327e:	d877      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b50      	cmp	r3, #80	@ 0x50
 8003282:	d03c      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0xfa>
 8003284:	2b50      	cmp	r3, #80	@ 0x50
 8003286:	d873      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b40      	cmp	r3, #64	@ 0x40
 800328a:	d058      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x13a>
 800328c:	2b40      	cmp	r3, #64	@ 0x40
 800328e:	d86f      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003290:	2b30      	cmp	r3, #48	@ 0x30
 8003292:	d064      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x15a>
 8003294:	2b30      	cmp	r3, #48	@ 0x30
 8003296:	d86b      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003298:	2b20      	cmp	r3, #32
 800329a:	d060      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x15a>
 800329c:	2b20      	cmp	r3, #32
 800329e:	d867      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d05c      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x15a>
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d05a      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x15a>
 80032a8:	e062      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ba:	f000 fb69 	bl	8003990 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	609a      	str	r2, [r3, #8]
      break;
 80032d6:	e04f      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032e8:	f000 fb52 	bl	8003990 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032fa:	609a      	str	r2, [r3, #8]
      break;
 80032fc:	e03c      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800330a:	461a      	mov	r2, r3
 800330c:	f000 fac6 	bl	800389c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2150      	movs	r1, #80	@ 0x50
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fb1f 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 800331c:	e02c      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800332a:	461a      	mov	r2, r3
 800332c:	f000 fae5 	bl	80038fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2160      	movs	r1, #96	@ 0x60
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fb0f 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 800333c:	e01c      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800334a:	461a      	mov	r2, r3
 800334c:	f000 faa6 	bl	800389c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2140      	movs	r1, #64	@ 0x40
 8003356:	4618      	mov	r0, r3
 8003358:	f000 faff 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 800335c:	e00c      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f000 faf6 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 800336e:	e003      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
      break;
 8003374:	e000      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a46      	ldr	r2, [pc, #280]	@ (8003510 <TIM_Base_SetConfig+0x12c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003402:	d00f      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a43      	ldr	r2, [pc, #268]	@ (8003514 <TIM_Base_SetConfig+0x130>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00b      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a42      	ldr	r2, [pc, #264]	@ (8003518 <TIM_Base_SetConfig+0x134>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d007      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a41      	ldr	r2, [pc, #260]	@ (800351c <TIM_Base_SetConfig+0x138>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a40      	ldr	r2, [pc, #256]	@ (8003520 <TIM_Base_SetConfig+0x13c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d108      	bne.n	8003436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800342a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a35      	ldr	r2, [pc, #212]	@ (8003510 <TIM_Base_SetConfig+0x12c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d02b      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003444:	d027      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a32      	ldr	r2, [pc, #200]	@ (8003514 <TIM_Base_SetConfig+0x130>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d023      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a31      	ldr	r2, [pc, #196]	@ (8003518 <TIM_Base_SetConfig+0x134>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01f      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a30      	ldr	r2, [pc, #192]	@ (800351c <TIM_Base_SetConfig+0x138>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01b      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a2f      	ldr	r2, [pc, #188]	@ (8003520 <TIM_Base_SetConfig+0x13c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d017      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a2e      	ldr	r2, [pc, #184]	@ (8003524 <TIM_Base_SetConfig+0x140>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a2d      	ldr	r2, [pc, #180]	@ (8003528 <TIM_Base_SetConfig+0x144>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00f      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2c      	ldr	r2, [pc, #176]	@ (800352c <TIM_Base_SetConfig+0x148>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00b      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a2b      	ldr	r2, [pc, #172]	@ (8003530 <TIM_Base_SetConfig+0x14c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a2a      	ldr	r2, [pc, #168]	@ (8003534 <TIM_Base_SetConfig+0x150>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d003      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a29      	ldr	r2, [pc, #164]	@ (8003538 <TIM_Base_SetConfig+0x154>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d108      	bne.n	80034a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800349c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a10      	ldr	r2, [pc, #64]	@ (8003510 <TIM_Base_SetConfig+0x12c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_Base_SetConfig+0xf8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a12      	ldr	r2, [pc, #72]	@ (8003520 <TIM_Base_SetConfig+0x13c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d103      	bne.n	80034e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d105      	bne.n	8003502 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f023 0201 	bic.w	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	611a      	str	r2, [r3, #16]
  }
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40010000 	.word	0x40010000
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800
 800351c:	40000c00 	.word	0x40000c00
 8003520:	40010400 	.word	0x40010400
 8003524:	40014000 	.word	0x40014000
 8003528:	40014400 	.word	0x40014400
 800352c:	40014800 	.word	0x40014800
 8003530:	40001800 	.word	0x40001800
 8003534:	40001c00 	.word	0x40001c00
 8003538:	40002000 	.word	0x40002000

0800353c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f023 0201 	bic.w	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800356a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0303 	bic.w	r3, r3, #3
 8003572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 0302 	bic.w	r3, r3, #2
 8003584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a20      	ldr	r2, [pc, #128]	@ (8003614 <TIM_OC1_SetConfig+0xd8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_OC1_SetConfig+0x64>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a1f      	ldr	r2, [pc, #124]	@ (8003618 <TIM_OC1_SetConfig+0xdc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d10c      	bne.n	80035ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0308 	bic.w	r3, r3, #8
 80035a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f023 0304 	bic.w	r3, r3, #4
 80035b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a15      	ldr	r2, [pc, #84]	@ (8003614 <TIM_OC1_SetConfig+0xd8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d003      	beq.n	80035ca <TIM_OC1_SetConfig+0x8e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a14      	ldr	r2, [pc, #80]	@ (8003618 <TIM_OC1_SetConfig+0xdc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d111      	bne.n	80035ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	621a      	str	r2, [r3, #32]
}
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40010000 	.word	0x40010000
 8003618:	40010400 	.word	0x40010400

0800361c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f023 0210 	bic.w	r2, r3, #16
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800364a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f023 0320 	bic.w	r3, r3, #32
 8003666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a22      	ldr	r2, [pc, #136]	@ (8003700 <TIM_OC2_SetConfig+0xe4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_OC2_SetConfig+0x68>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a21      	ldr	r2, [pc, #132]	@ (8003704 <TIM_OC2_SetConfig+0xe8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10d      	bne.n	80036a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800368a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800369e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a17      	ldr	r2, [pc, #92]	@ (8003700 <TIM_OC2_SetConfig+0xe4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_OC2_SetConfig+0x94>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a16      	ldr	r2, [pc, #88]	@ (8003704 <TIM_OC2_SetConfig+0xe8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d113      	bne.n	80036d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40010000 	.word	0x40010000
 8003704:	40010400 	.word	0x40010400

08003708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a21      	ldr	r2, [pc, #132]	@ (80037e8 <TIM_OC3_SetConfig+0xe0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d003      	beq.n	800376e <TIM_OC3_SetConfig+0x66>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a20      	ldr	r2, [pc, #128]	@ (80037ec <TIM_OC3_SetConfig+0xe4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10d      	bne.n	800378a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	021b      	lsls	r3, r3, #8
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a16      	ldr	r2, [pc, #88]	@ (80037e8 <TIM_OC3_SetConfig+0xe0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_OC3_SetConfig+0x92>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a15      	ldr	r2, [pc, #84]	@ (80037ec <TIM_OC3_SetConfig+0xe4>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d113      	bne.n	80037c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	621a      	str	r2, [r3, #32]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40010000 	.word	0x40010000
 80037ec:	40010400 	.word	0x40010400

080037f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800381e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800383a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	031b      	lsls	r3, r3, #12
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a12      	ldr	r2, [pc, #72]	@ (8003894 <TIM_OC4_SetConfig+0xa4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d003      	beq.n	8003858 <TIM_OC4_SetConfig+0x68>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a11      	ldr	r2, [pc, #68]	@ (8003898 <TIM_OC4_SetConfig+0xa8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d109      	bne.n	800386c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800385e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	4313      	orrs	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	621a      	str	r2, [r3, #32]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000
 8003898:	40010400 	.word	0x40010400

0800389c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f023 0201 	bic.w	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f023 030a 	bic.w	r3, r3, #10
 80038d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b087      	sub	sp, #28
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f023 0210 	bic.w	r2, r3, #16
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	031b      	lsls	r3, r3, #12
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003936:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	f043 0307 	orr.w	r3, r3, #7
 800397c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	021a      	lsls	r2, r3, #8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	609a      	str	r2, [r3, #8]
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2201      	movs	r2, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1a      	ldr	r2, [r3, #32]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	401a      	ands	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a1a      	ldr	r2, [r3, #32]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	fa01 f303 	lsl.w	r3, r1, r3
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	621a      	str	r2, [r3, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e05a      	b.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a21      	ldr	r2, [pc, #132]	@ (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d022      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a80:	d01d      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1d      	ldr	r2, [pc, #116]	@ (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d018      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1b      	ldr	r2, [pc, #108]	@ (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a18      	ldr	r2, [pc, #96]	@ (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a17      	ldr	r2, [pc, #92]	@ (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a15      	ldr	r2, [pc, #84]	@ (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10c      	bne.n	8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40010000 	.word	0x40010000
 8003afc:	40000400 	.word	0x40000400
 8003b00:	40000800 	.word	0x40000800
 8003b04:	40000c00 	.word	0x40000c00
 8003b08:	40010400 	.word	0x40010400
 8003b0c:	40014000 	.word	0x40014000
 8003b10:	40001800 	.word	0x40001800

08003b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e042      	b.n	8003bd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fd fc98 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2224      	movs	r2, #36	@ 0x24
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fc85 	bl	8004490 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691a      	ldr	r2, [r3, #16]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b0ba      	sub	sp, #232	@ 0xe8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10f      	bne.n	8003c42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_UART_IRQHandler+0x66>
 8003c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fb69 	bl	8004312 <UART_Receive_IT>
      return;
 8003c40:	e25b      	b.n	80040fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80de 	beq.w	8003e08 <HAL_UART_IRQHandler+0x22c>
 8003c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d106      	bne.n	8003c66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80d1 	beq.w	8003e08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <HAL_UART_IRQHandler+0xae>
 8003c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	f043 0201 	orr.w	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_UART_IRQHandler+0xd2>
 8003c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	f043 0202 	orr.w	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_UART_IRQHandler+0xf6>
 8003cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cca:	f043 0204 	orr.w	r2, r3, #4
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d011      	beq.n	8003d02 <HAL_UART_IRQHandler+0x126>
 8003cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce2:	f003 0320 	and.w	r3, r3, #32
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d105      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfa:	f043 0208 	orr.w	r2, r3, #8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 81f2 	beq.w	80040f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_UART_IRQHandler+0x14e>
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 faf4 	bl	8004312 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d34:	2b40      	cmp	r3, #64	@ 0x40
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d103      	bne.n	8003d56 <HAL_UART_IRQHandler+0x17a>
 8003d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d04f      	beq.n	8003df6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f9fc 	bl	8004154 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d66:	2b40      	cmp	r3, #64	@ 0x40
 8003d68:	d141      	bne.n	8003dee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3314      	adds	r3, #20
 8003d70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3314      	adds	r3, #20
 8003d92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003da2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1d9      	bne.n	8003d6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d013      	beq.n	8003de6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8003fbc <HAL_UART_IRQHandler+0x3e0>)
 8003dc4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd fe9d 	bl	8001b0a <HAL_DMA_Abort_IT>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d016      	beq.n	8003e04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003de0:	4610      	mov	r0, r2
 8003de2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	e00e      	b.n	8003e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f99e 	bl	8004128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	e00a      	b.n	8003e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f99a 	bl	8004128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df4:	e006      	b.n	8003e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f996 	bl	8004128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003e02:	e175      	b.n	80040f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	bf00      	nop
    return;
 8003e06:	e173      	b.n	80040f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	f040 814f 	bne.w	80040b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8148 	beq.w	80040b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8141 	beq.w	80040b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4e:	2b40      	cmp	r3, #64	@ 0x40
 8003e50:	f040 80b6 	bne.w	8003fc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8145 	beq.w	80040f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e72:	429a      	cmp	r2, r3
 8003e74:	f080 813e 	bcs.w	80040f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e8a:	f000 8088 	beq.w	8003f9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003eba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ebe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ec6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1d9      	bne.n	8003e8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003eea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3314      	adds	r3, #20
 8003efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003efe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e1      	bne.n	8003eda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3314      	adds	r3, #20
 8003f36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e3      	bne.n	8003f16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f6e:	f023 0310 	bic.w	r3, r3, #16
 8003f72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f82:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e3      	bne.n	8003f5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fd fd46 	bl	8001a2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f8c1 	bl	800413c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fba:	e09b      	b.n	80040f4 <HAL_UART_IRQHandler+0x518>
 8003fbc:	0800421b 	.word	0x0800421b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 808e 	beq.w	80040f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8089 	beq.w	80040f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	330c      	adds	r3, #12
 8003fec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800400a:	647a      	str	r2, [r7, #68]	@ 0x44
 800400c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004010:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e3      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3314      	adds	r3, #20
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	623b      	str	r3, [r7, #32]
   return(result);
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3314      	adds	r3, #20
 800403e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004042:	633a      	str	r2, [r7, #48]	@ 0x30
 8004044:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e3      	bne.n	800401e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	60fb      	str	r3, [r7, #12]
   return(result);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0310 	bic.w	r3, r3, #16
 800407a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	330c      	adds	r3, #12
 8004084:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004088:	61fa      	str	r2, [r7, #28]
 800408a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408c:	69b9      	ldr	r1, [r7, #24]
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	e841 2300 	strex	r3, r2, [r1]
 8004094:	617b      	str	r3, [r7, #20]
   return(result);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e3      	bne.n	8004064 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f847 	bl	800413c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040ae:	e023      	b.n	80040f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d009      	beq.n	80040d0 <HAL_UART_IRQHandler+0x4f4>
 80040bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f8ba 	bl	8004242 <UART_Transmit_IT>
    return;
 80040ce:	e014      	b.n	80040fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00e      	beq.n	80040fa <HAL_UART_IRQHandler+0x51e>
 80040dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8fa 	bl	80042e2 <UART_EndTransmit_IT>
    return;
 80040ee:	e004      	b.n	80040fa <HAL_UART_IRQHandler+0x51e>
    return;
 80040f0:	bf00      	nop
 80040f2:	e002      	b.n	80040fa <HAL_UART_IRQHandler+0x51e>
      return;
 80040f4:	bf00      	nop
 80040f6:	e000      	b.n	80040fa <HAL_UART_IRQHandler+0x51e>
      return;
 80040f8:	bf00      	nop
  }
}
 80040fa:	37e8      	adds	r7, #232	@ 0xe8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004154:	b480      	push	{r7}
 8004156:	b095      	sub	sp, #84	@ 0x54
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800416c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800417c:	643a      	str	r2, [r7, #64]	@ 0x40
 800417e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004182:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800418a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3314      	adds	r3, #20
 8004196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	61fb      	str	r3, [r7, #28]
   return(result);
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3314      	adds	r3, #20
 80041ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d119      	bne.n	8004200 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	60bb      	str	r3, [r7, #8]
   return(result);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f023 0310 	bic.w	r3, r3, #16
 80041e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041ec:	61ba      	str	r2, [r7, #24]
 80041ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6979      	ldr	r1, [r7, #20]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	613b      	str	r3, [r7, #16]
   return(result);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e5      	bne.n	80041cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800420e:	bf00      	nop
 8004210:	3754      	adds	r7, #84	@ 0x54
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004226:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff ff77 	bl	8004128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b21      	cmp	r3, #33	@ 0x21
 8004254:	d13e      	bne.n	80042d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800425e:	d114      	bne.n	800428a <UART_Transmit_IT+0x48>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d110      	bne.n	800428a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800427c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	1c9a      	adds	r2, r3, #2
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	621a      	str	r2, [r3, #32]
 8004288:	e008      	b.n	800429c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	1c59      	adds	r1, r3, #1
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6211      	str	r1, [r2, #32]
 8004294:	781a      	ldrb	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	4619      	mov	r1, r3
 80042aa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10f      	bne.n	80042d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fefc 	bl	8004100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b08c      	sub	sp, #48	@ 0x30
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b22      	cmp	r3, #34	@ 0x22
 8004324:	f040 80ae 	bne.w	8004484 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004330:	d117      	bne.n	8004362 <UART_Receive_IT+0x50>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d113      	bne.n	8004362 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004350:	b29a      	uxth	r2, r3
 8004352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004354:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435a:	1c9a      	adds	r2, r3, #2
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004360:	e026      	b.n	80043b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004366:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004368:	2300      	movs	r3, #0
 800436a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004374:	d007      	beq.n	8004386 <UART_Receive_IT+0x74>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <UART_Receive_IT+0x82>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	b2da      	uxtb	r2, r3
 800438e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	e008      	b.n	80043a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4619      	mov	r1, r3
 80043be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d15d      	bne.n	8004480 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0220 	bic.w	r2, r2, #32
 80043d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004406:	2b01      	cmp	r3, #1
 8004408:	d135      	bne.n	8004476 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	613b      	str	r3, [r7, #16]
   return(result);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f023 0310 	bic.w	r3, r3, #16
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004430:	623a      	str	r2, [r7, #32]
 8004432:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	69f9      	ldr	r1, [r7, #28]
 8004436:	6a3a      	ldr	r2, [r7, #32]
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	61bb      	str	r3, [r7, #24]
   return(result);
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2b10      	cmp	r3, #16
 8004450:	d10a      	bne.n	8004468 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fe64 	bl	800413c <HAL_UARTEx_RxEventCallback>
 8004474:	e002      	b.n	800447c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fe4c 	bl	8004114 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e002      	b.n	8004486 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	e000      	b.n	8004486 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
  }
}
 8004486:	4618      	mov	r0, r3
 8004488:	3730      	adds	r7, #48	@ 0x30
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004494:	b0c0      	sub	sp, #256	@ 0x100
 8004496:	af00      	add	r7, sp, #0
 8004498:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ac:	68d9      	ldr	r1, [r3, #12]
 80044ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	ea40 0301 	orr.w	r3, r0, r1
 80044b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044e8:	f021 010c 	bic.w	r1, r1, #12
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044f6:	430b      	orrs	r3, r1
 80044f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450a:	6999      	ldr	r1, [r3, #24]
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	ea40 0301 	orr.w	r3, r0, r1
 8004516:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b8f      	ldr	r3, [pc, #572]	@ (800475c <UART_SetConfig+0x2cc>)
 8004520:	429a      	cmp	r2, r3
 8004522:	d005      	beq.n	8004530 <UART_SetConfig+0xa0>
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4b8d      	ldr	r3, [pc, #564]	@ (8004760 <UART_SetConfig+0x2d0>)
 800452c:	429a      	cmp	r2, r3
 800452e:	d104      	bne.n	800453a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004530:	f7fd fdf2 	bl	8002118 <HAL_RCC_GetPCLK2Freq>
 8004534:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004538:	e003      	b.n	8004542 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800453a:	f7fd fdd9 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 800453e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800454c:	f040 810c 	bne.w	8004768 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004554:	2200      	movs	r2, #0
 8004556:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800455a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800455e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004562:	4622      	mov	r2, r4
 8004564:	462b      	mov	r3, r5
 8004566:	1891      	adds	r1, r2, r2
 8004568:	65b9      	str	r1, [r7, #88]	@ 0x58
 800456a:	415b      	adcs	r3, r3
 800456c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800456e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004572:	4621      	mov	r1, r4
 8004574:	eb12 0801 	adds.w	r8, r2, r1
 8004578:	4629      	mov	r1, r5
 800457a:	eb43 0901 	adc.w	r9, r3, r1
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800458a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800458e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004592:	4690      	mov	r8, r2
 8004594:	4699      	mov	r9, r3
 8004596:	4623      	mov	r3, r4
 8004598:	eb18 0303 	adds.w	r3, r8, r3
 800459c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045a0:	462b      	mov	r3, r5
 80045a2:	eb49 0303 	adc.w	r3, r9, r3
 80045a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045be:	460b      	mov	r3, r1
 80045c0:	18db      	adds	r3, r3, r3
 80045c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80045c4:	4613      	mov	r3, r2
 80045c6:	eb42 0303 	adc.w	r3, r2, r3
 80045ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80045cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045d4:	f7fb fe74 	bl	80002c0 <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4b61      	ldr	r3, [pc, #388]	@ (8004764 <UART_SetConfig+0x2d4>)
 80045de:	fba3 2302 	umull	r2, r3, r3, r2
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	011c      	lsls	r4, r3, #4
 80045e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80045f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80045f8:	4642      	mov	r2, r8
 80045fa:	464b      	mov	r3, r9
 80045fc:	1891      	adds	r1, r2, r2
 80045fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004600:	415b      	adcs	r3, r3
 8004602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004604:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004608:	4641      	mov	r1, r8
 800460a:	eb12 0a01 	adds.w	sl, r2, r1
 800460e:	4649      	mov	r1, r9
 8004610:	eb43 0b01 	adc.w	fp, r3, r1
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004620:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004628:	4692      	mov	sl, r2
 800462a:	469b      	mov	fp, r3
 800462c:	4643      	mov	r3, r8
 800462e:	eb1a 0303 	adds.w	r3, sl, r3
 8004632:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004636:	464b      	mov	r3, r9
 8004638:	eb4b 0303 	adc.w	r3, fp, r3
 800463c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800464c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004650:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004654:	460b      	mov	r3, r1
 8004656:	18db      	adds	r3, r3, r3
 8004658:	643b      	str	r3, [r7, #64]	@ 0x40
 800465a:	4613      	mov	r3, r2
 800465c:	eb42 0303 	adc.w	r3, r2, r3
 8004660:	647b      	str	r3, [r7, #68]	@ 0x44
 8004662:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004666:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800466a:	f7fb fe29 	bl	80002c0 <__aeabi_uldivmod>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4611      	mov	r1, r2
 8004674:	4b3b      	ldr	r3, [pc, #236]	@ (8004764 <UART_SetConfig+0x2d4>)
 8004676:	fba3 2301 	umull	r2, r3, r3, r1
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	2264      	movs	r2, #100	@ 0x64
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	1acb      	subs	r3, r1, r3
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800468a:	4b36      	ldr	r3, [pc, #216]	@ (8004764 <UART_SetConfig+0x2d4>)
 800468c:	fba3 2302 	umull	r2, r3, r3, r2
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004698:	441c      	add	r4, r3
 800469a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046ac:	4642      	mov	r2, r8
 80046ae:	464b      	mov	r3, r9
 80046b0:	1891      	adds	r1, r2, r2
 80046b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046b4:	415b      	adcs	r3, r3
 80046b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046bc:	4641      	mov	r1, r8
 80046be:	1851      	adds	r1, r2, r1
 80046c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80046c2:	4649      	mov	r1, r9
 80046c4:	414b      	adcs	r3, r1
 80046c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046d4:	4659      	mov	r1, fp
 80046d6:	00cb      	lsls	r3, r1, #3
 80046d8:	4651      	mov	r1, sl
 80046da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046de:	4651      	mov	r1, sl
 80046e0:	00ca      	lsls	r2, r1, #3
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	4603      	mov	r3, r0
 80046e8:	4642      	mov	r2, r8
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046f0:	464b      	mov	r3, r9
 80046f2:	460a      	mov	r2, r1
 80046f4:	eb42 0303 	adc.w	r3, r2, r3
 80046f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004708:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800470c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004710:	460b      	mov	r3, r1
 8004712:	18db      	adds	r3, r3, r3
 8004714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004716:	4613      	mov	r3, r2
 8004718:	eb42 0303 	adc.w	r3, r2, r3
 800471c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800471e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004722:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004726:	f7fb fdcb 	bl	80002c0 <__aeabi_uldivmod>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <UART_SetConfig+0x2d4>)
 8004730:	fba3 1302 	umull	r1, r3, r3, r2
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	2164      	movs	r1, #100	@ 0x64
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	3332      	adds	r3, #50	@ 0x32
 8004742:	4a08      	ldr	r2, [pc, #32]	@ (8004764 <UART_SetConfig+0x2d4>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	f003 0207 	and.w	r2, r3, #7
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4422      	add	r2, r4
 8004756:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004758:	e106      	b.n	8004968 <UART_SetConfig+0x4d8>
 800475a:	bf00      	nop
 800475c:	40011000 	.word	0x40011000
 8004760:	40011400 	.word	0x40011400
 8004764:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800476c:	2200      	movs	r2, #0
 800476e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004772:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004776:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800477a:	4642      	mov	r2, r8
 800477c:	464b      	mov	r3, r9
 800477e:	1891      	adds	r1, r2, r2
 8004780:	6239      	str	r1, [r7, #32]
 8004782:	415b      	adcs	r3, r3
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24
 8004786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800478a:	4641      	mov	r1, r8
 800478c:	1854      	adds	r4, r2, r1
 800478e:	4649      	mov	r1, r9
 8004790:	eb43 0501 	adc.w	r5, r3, r1
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	00eb      	lsls	r3, r5, #3
 800479e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047a2:	00e2      	lsls	r2, r4, #3
 80047a4:	4614      	mov	r4, r2
 80047a6:	461d      	mov	r5, r3
 80047a8:	4643      	mov	r3, r8
 80047aa:	18e3      	adds	r3, r4, r3
 80047ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047b0:	464b      	mov	r3, r9
 80047b2:	eb45 0303 	adc.w	r3, r5, r3
 80047b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047d6:	4629      	mov	r1, r5
 80047d8:	008b      	lsls	r3, r1, #2
 80047da:	4621      	mov	r1, r4
 80047dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e0:	4621      	mov	r1, r4
 80047e2:	008a      	lsls	r2, r1, #2
 80047e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047e8:	f7fb fd6a 	bl	80002c0 <__aeabi_uldivmod>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	4b60      	ldr	r3, [pc, #384]	@ (8004974 <UART_SetConfig+0x4e4>)
 80047f2:	fba3 2302 	umull	r2, r3, r3, r2
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	011c      	lsls	r4, r3, #4
 80047fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047fe:	2200      	movs	r2, #0
 8004800:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004804:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004808:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800480c:	4642      	mov	r2, r8
 800480e:	464b      	mov	r3, r9
 8004810:	1891      	adds	r1, r2, r2
 8004812:	61b9      	str	r1, [r7, #24]
 8004814:	415b      	adcs	r3, r3
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800481c:	4641      	mov	r1, r8
 800481e:	1851      	adds	r1, r2, r1
 8004820:	6139      	str	r1, [r7, #16]
 8004822:	4649      	mov	r1, r9
 8004824:	414b      	adcs	r3, r1
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004834:	4659      	mov	r1, fp
 8004836:	00cb      	lsls	r3, r1, #3
 8004838:	4651      	mov	r1, sl
 800483a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800483e:	4651      	mov	r1, sl
 8004840:	00ca      	lsls	r2, r1, #3
 8004842:	4610      	mov	r0, r2
 8004844:	4619      	mov	r1, r3
 8004846:	4603      	mov	r3, r0
 8004848:	4642      	mov	r2, r8
 800484a:	189b      	adds	r3, r3, r2
 800484c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004850:	464b      	mov	r3, r9
 8004852:	460a      	mov	r2, r1
 8004854:	eb42 0303 	adc.w	r3, r2, r3
 8004858:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004866:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004874:	4649      	mov	r1, r9
 8004876:	008b      	lsls	r3, r1, #2
 8004878:	4641      	mov	r1, r8
 800487a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800487e:	4641      	mov	r1, r8
 8004880:	008a      	lsls	r2, r1, #2
 8004882:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004886:	f7fb fd1b 	bl	80002c0 <__aeabi_uldivmod>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4611      	mov	r1, r2
 8004890:	4b38      	ldr	r3, [pc, #224]	@ (8004974 <UART_SetConfig+0x4e4>)
 8004892:	fba3 2301 	umull	r2, r3, r3, r1
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	2264      	movs	r2, #100	@ 0x64
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	1acb      	subs	r3, r1, r3
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	3332      	adds	r3, #50	@ 0x32
 80048a4:	4a33      	ldr	r2, [pc, #204]	@ (8004974 <UART_SetConfig+0x4e4>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048b0:	441c      	add	r4, r3
 80048b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048b6:	2200      	movs	r2, #0
 80048b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80048ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80048bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048c0:	4642      	mov	r2, r8
 80048c2:	464b      	mov	r3, r9
 80048c4:	1891      	adds	r1, r2, r2
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	415b      	adcs	r3, r3
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048d0:	4641      	mov	r1, r8
 80048d2:	1851      	adds	r1, r2, r1
 80048d4:	6039      	str	r1, [r7, #0]
 80048d6:	4649      	mov	r1, r9
 80048d8:	414b      	adcs	r3, r1
 80048da:	607b      	str	r3, [r7, #4]
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048e8:	4659      	mov	r1, fp
 80048ea:	00cb      	lsls	r3, r1, #3
 80048ec:	4651      	mov	r1, sl
 80048ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f2:	4651      	mov	r1, sl
 80048f4:	00ca      	lsls	r2, r1, #3
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	4603      	mov	r3, r0
 80048fc:	4642      	mov	r2, r8
 80048fe:	189b      	adds	r3, r3, r2
 8004900:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004902:	464b      	mov	r3, r9
 8004904:	460a      	mov	r2, r1
 8004906:	eb42 0303 	adc.w	r3, r2, r3
 800490a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	663b      	str	r3, [r7, #96]	@ 0x60
 8004916:	667a      	str	r2, [r7, #100]	@ 0x64
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004924:	4649      	mov	r1, r9
 8004926:	008b      	lsls	r3, r1, #2
 8004928:	4641      	mov	r1, r8
 800492a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800492e:	4641      	mov	r1, r8
 8004930:	008a      	lsls	r2, r1, #2
 8004932:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004936:	f7fb fcc3 	bl	80002c0 <__aeabi_uldivmod>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4b0d      	ldr	r3, [pc, #52]	@ (8004974 <UART_SetConfig+0x4e4>)
 8004940:	fba3 1302 	umull	r1, r3, r3, r2
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	2164      	movs	r1, #100	@ 0x64
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	3332      	adds	r3, #50	@ 0x32
 8004952:	4a08      	ldr	r2, [pc, #32]	@ (8004974 <UART_SetConfig+0x4e4>)
 8004954:	fba2 2303 	umull	r2, r3, r2, r3
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	f003 020f 	and.w	r2, r3, #15
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4422      	add	r2, r4
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800496e:	46bd      	mov	sp, r7
 8004970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004974:	51eb851f 	.word	0x51eb851f

08004978 <sniprintf>:
 8004978:	b40c      	push	{r2, r3}
 800497a:	b530      	push	{r4, r5, lr}
 800497c:	4b17      	ldr	r3, [pc, #92]	@ (80049dc <sniprintf+0x64>)
 800497e:	1e0c      	subs	r4, r1, #0
 8004980:	681d      	ldr	r5, [r3, #0]
 8004982:	b09d      	sub	sp, #116	@ 0x74
 8004984:	da08      	bge.n	8004998 <sniprintf+0x20>
 8004986:	238b      	movs	r3, #139	@ 0x8b
 8004988:	602b      	str	r3, [r5, #0]
 800498a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800498e:	b01d      	add	sp, #116	@ 0x74
 8004990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004994:	b002      	add	sp, #8
 8004996:	4770      	bx	lr
 8004998:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800499c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80049a0:	bf14      	ite	ne
 80049a2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80049a6:	4623      	moveq	r3, r4
 80049a8:	9304      	str	r3, [sp, #16]
 80049aa:	9307      	str	r3, [sp, #28]
 80049ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049b0:	9002      	str	r0, [sp, #8]
 80049b2:	9006      	str	r0, [sp, #24]
 80049b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80049b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80049ba:	ab21      	add	r3, sp, #132	@ 0x84
 80049bc:	a902      	add	r1, sp, #8
 80049be:	4628      	mov	r0, r5
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	f000 f89d 	bl	8004b00 <_svfiprintf_r>
 80049c6:	1c43      	adds	r3, r0, #1
 80049c8:	bfbc      	itt	lt
 80049ca:	238b      	movlt	r3, #139	@ 0x8b
 80049cc:	602b      	strlt	r3, [r5, #0]
 80049ce:	2c00      	cmp	r4, #0
 80049d0:	d0dd      	beq.n	800498e <sniprintf+0x16>
 80049d2:	9b02      	ldr	r3, [sp, #8]
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	e7d9      	b.n	800498e <sniprintf+0x16>
 80049da:	bf00      	nop
 80049dc:	2000021c 	.word	0x2000021c

080049e0 <memset>:
 80049e0:	4402      	add	r2, r0
 80049e2:	4603      	mov	r3, r0
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d100      	bne.n	80049ea <memset+0xa>
 80049e8:	4770      	bx	lr
 80049ea:	f803 1b01 	strb.w	r1, [r3], #1
 80049ee:	e7f9      	b.n	80049e4 <memset+0x4>

080049f0 <__errno>:
 80049f0:	4b01      	ldr	r3, [pc, #4]	@ (80049f8 <__errno+0x8>)
 80049f2:	6818      	ldr	r0, [r3, #0]
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	2000021c 	.word	0x2000021c

080049fc <__libc_init_array>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004a34 <__libc_init_array+0x38>)
 8004a00:	4c0d      	ldr	r4, [pc, #52]	@ (8004a38 <__libc_init_array+0x3c>)
 8004a02:	1b64      	subs	r4, r4, r5
 8004a04:	10a4      	asrs	r4, r4, #2
 8004a06:	2600      	movs	r6, #0
 8004a08:	42a6      	cmp	r6, r4
 8004a0a:	d109      	bne.n	8004a20 <__libc_init_array+0x24>
 8004a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8004a3c <__libc_init_array+0x40>)
 8004a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8004a40 <__libc_init_array+0x44>)
 8004a10:	f000 fc66 	bl	80052e0 <_init>
 8004a14:	1b64      	subs	r4, r4, r5
 8004a16:	10a4      	asrs	r4, r4, #2
 8004a18:	2600      	movs	r6, #0
 8004a1a:	42a6      	cmp	r6, r4
 8004a1c:	d105      	bne.n	8004a2a <__libc_init_array+0x2e>
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}
 8004a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a24:	4798      	blx	r3
 8004a26:	3601      	adds	r6, #1
 8004a28:	e7ee      	b.n	8004a08 <__libc_init_array+0xc>
 8004a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2e:	4798      	blx	r3
 8004a30:	3601      	adds	r6, #1
 8004a32:	e7f2      	b.n	8004a1a <__libc_init_array+0x1e>
 8004a34:	080053a4 	.word	0x080053a4
 8004a38:	080053a4 	.word	0x080053a4
 8004a3c:	080053a4 	.word	0x080053a4
 8004a40:	080053a8 	.word	0x080053a8

08004a44 <__retarget_lock_acquire_recursive>:
 8004a44:	4770      	bx	lr

08004a46 <__retarget_lock_release_recursive>:
 8004a46:	4770      	bx	lr

08004a48 <__ssputs_r>:
 8004a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a4c:	688e      	ldr	r6, [r1, #8]
 8004a4e:	461f      	mov	r7, r3
 8004a50:	42be      	cmp	r6, r7
 8004a52:	680b      	ldr	r3, [r1, #0]
 8004a54:	4682      	mov	sl, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	4690      	mov	r8, r2
 8004a5a:	d82d      	bhi.n	8004ab8 <__ssputs_r+0x70>
 8004a5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a64:	d026      	beq.n	8004ab4 <__ssputs_r+0x6c>
 8004a66:	6965      	ldr	r5, [r4, #20]
 8004a68:	6909      	ldr	r1, [r1, #16]
 8004a6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a6e:	eba3 0901 	sub.w	r9, r3, r1
 8004a72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a76:	1c7b      	adds	r3, r7, #1
 8004a78:	444b      	add	r3, r9
 8004a7a:	106d      	asrs	r5, r5, #1
 8004a7c:	429d      	cmp	r5, r3
 8004a7e:	bf38      	it	cc
 8004a80:	461d      	movcc	r5, r3
 8004a82:	0553      	lsls	r3, r2, #21
 8004a84:	d527      	bpl.n	8004ad6 <__ssputs_r+0x8e>
 8004a86:	4629      	mov	r1, r5
 8004a88:	f000 f958 	bl	8004d3c <_malloc_r>
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	b360      	cbz	r0, 8004aea <__ssputs_r+0xa2>
 8004a90:	6921      	ldr	r1, [r4, #16]
 8004a92:	464a      	mov	r2, r9
 8004a94:	f000 fbc4 	bl	8005220 <memcpy>
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa2:	81a3      	strh	r3, [r4, #12]
 8004aa4:	6126      	str	r6, [r4, #16]
 8004aa6:	6165      	str	r5, [r4, #20]
 8004aa8:	444e      	add	r6, r9
 8004aaa:	eba5 0509 	sub.w	r5, r5, r9
 8004aae:	6026      	str	r6, [r4, #0]
 8004ab0:	60a5      	str	r5, [r4, #8]
 8004ab2:	463e      	mov	r6, r7
 8004ab4:	42be      	cmp	r6, r7
 8004ab6:	d900      	bls.n	8004aba <__ssputs_r+0x72>
 8004ab8:	463e      	mov	r6, r7
 8004aba:	6820      	ldr	r0, [r4, #0]
 8004abc:	4632      	mov	r2, r6
 8004abe:	4641      	mov	r1, r8
 8004ac0:	f000 fb84 	bl	80051cc <memmove>
 8004ac4:	68a3      	ldr	r3, [r4, #8]
 8004ac6:	1b9b      	subs	r3, r3, r6
 8004ac8:	60a3      	str	r3, [r4, #8]
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	4433      	add	r3, r6
 8004ace:	6023      	str	r3, [r4, #0]
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad6:	462a      	mov	r2, r5
 8004ad8:	f000 fb4a 	bl	8005170 <_realloc_r>
 8004adc:	4606      	mov	r6, r0
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d1e0      	bne.n	8004aa4 <__ssputs_r+0x5c>
 8004ae2:	6921      	ldr	r1, [r4, #16]
 8004ae4:	4650      	mov	r0, sl
 8004ae6:	f000 fba9 	bl	800523c <_free_r>
 8004aea:	230c      	movs	r3, #12
 8004aec:	f8ca 3000 	str.w	r3, [sl]
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004afc:	e7e9      	b.n	8004ad2 <__ssputs_r+0x8a>
	...

08004b00 <_svfiprintf_r>:
 8004b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	4698      	mov	r8, r3
 8004b06:	898b      	ldrh	r3, [r1, #12]
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	b09d      	sub	sp, #116	@ 0x74
 8004b0c:	4607      	mov	r7, r0
 8004b0e:	460d      	mov	r5, r1
 8004b10:	4614      	mov	r4, r2
 8004b12:	d510      	bpl.n	8004b36 <_svfiprintf_r+0x36>
 8004b14:	690b      	ldr	r3, [r1, #16]
 8004b16:	b973      	cbnz	r3, 8004b36 <_svfiprintf_r+0x36>
 8004b18:	2140      	movs	r1, #64	@ 0x40
 8004b1a:	f000 f90f 	bl	8004d3c <_malloc_r>
 8004b1e:	6028      	str	r0, [r5, #0]
 8004b20:	6128      	str	r0, [r5, #16]
 8004b22:	b930      	cbnz	r0, 8004b32 <_svfiprintf_r+0x32>
 8004b24:	230c      	movs	r3, #12
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b2c:	b01d      	add	sp, #116	@ 0x74
 8004b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b32:	2340      	movs	r3, #64	@ 0x40
 8004b34:	616b      	str	r3, [r5, #20]
 8004b36:	2300      	movs	r3, #0
 8004b38:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b44:	2330      	movs	r3, #48	@ 0x30
 8004b46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ce4 <_svfiprintf_r+0x1e4>
 8004b4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b4e:	f04f 0901 	mov.w	r9, #1
 8004b52:	4623      	mov	r3, r4
 8004b54:	469a      	mov	sl, r3
 8004b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b5a:	b10a      	cbz	r2, 8004b60 <_svfiprintf_r+0x60>
 8004b5c:	2a25      	cmp	r2, #37	@ 0x25
 8004b5e:	d1f9      	bne.n	8004b54 <_svfiprintf_r+0x54>
 8004b60:	ebba 0b04 	subs.w	fp, sl, r4
 8004b64:	d00b      	beq.n	8004b7e <_svfiprintf_r+0x7e>
 8004b66:	465b      	mov	r3, fp
 8004b68:	4622      	mov	r2, r4
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	f7ff ff6b 	bl	8004a48 <__ssputs_r>
 8004b72:	3001      	adds	r0, #1
 8004b74:	f000 80a7 	beq.w	8004cc6 <_svfiprintf_r+0x1c6>
 8004b78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b7a:	445a      	add	r2, fp
 8004b7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 809f 	beq.w	8004cc6 <_svfiprintf_r+0x1c6>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b92:	f10a 0a01 	add.w	sl, sl, #1
 8004b96:	9304      	str	r3, [sp, #16]
 8004b98:	9307      	str	r3, [sp, #28]
 8004b9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ba0:	4654      	mov	r4, sl
 8004ba2:	2205      	movs	r2, #5
 8004ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba8:	484e      	ldr	r0, [pc, #312]	@ (8004ce4 <_svfiprintf_r+0x1e4>)
 8004baa:	f7fb fb39 	bl	8000220 <memchr>
 8004bae:	9a04      	ldr	r2, [sp, #16]
 8004bb0:	b9d8      	cbnz	r0, 8004bea <_svfiprintf_r+0xea>
 8004bb2:	06d0      	lsls	r0, r2, #27
 8004bb4:	bf44      	itt	mi
 8004bb6:	2320      	movmi	r3, #32
 8004bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bbc:	0711      	lsls	r1, r2, #28
 8004bbe:	bf44      	itt	mi
 8004bc0:	232b      	movmi	r3, #43	@ 0x2b
 8004bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bcc:	d015      	beq.n	8004bfa <_svfiprintf_r+0xfa>
 8004bce:	9a07      	ldr	r2, [sp, #28]
 8004bd0:	4654      	mov	r4, sl
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f04f 0c0a 	mov.w	ip, #10
 8004bd8:	4621      	mov	r1, r4
 8004bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bde:	3b30      	subs	r3, #48	@ 0x30
 8004be0:	2b09      	cmp	r3, #9
 8004be2:	d94b      	bls.n	8004c7c <_svfiprintf_r+0x17c>
 8004be4:	b1b0      	cbz	r0, 8004c14 <_svfiprintf_r+0x114>
 8004be6:	9207      	str	r2, [sp, #28]
 8004be8:	e014      	b.n	8004c14 <_svfiprintf_r+0x114>
 8004bea:	eba0 0308 	sub.w	r3, r0, r8
 8004bee:	fa09 f303 	lsl.w	r3, r9, r3
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	9304      	str	r3, [sp, #16]
 8004bf6:	46a2      	mov	sl, r4
 8004bf8:	e7d2      	b.n	8004ba0 <_svfiprintf_r+0xa0>
 8004bfa:	9b03      	ldr	r3, [sp, #12]
 8004bfc:	1d19      	adds	r1, r3, #4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	9103      	str	r1, [sp, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	bfbb      	ittet	lt
 8004c06:	425b      	neglt	r3, r3
 8004c08:	f042 0202 	orrlt.w	r2, r2, #2
 8004c0c:	9307      	strge	r3, [sp, #28]
 8004c0e:	9307      	strlt	r3, [sp, #28]
 8004c10:	bfb8      	it	lt
 8004c12:	9204      	strlt	r2, [sp, #16]
 8004c14:	7823      	ldrb	r3, [r4, #0]
 8004c16:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c18:	d10a      	bne.n	8004c30 <_svfiprintf_r+0x130>
 8004c1a:	7863      	ldrb	r3, [r4, #1]
 8004c1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c1e:	d132      	bne.n	8004c86 <_svfiprintf_r+0x186>
 8004c20:	9b03      	ldr	r3, [sp, #12]
 8004c22:	1d1a      	adds	r2, r3, #4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	9203      	str	r2, [sp, #12]
 8004c28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c2c:	3402      	adds	r4, #2
 8004c2e:	9305      	str	r3, [sp, #20]
 8004c30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004cf4 <_svfiprintf_r+0x1f4>
 8004c34:	7821      	ldrb	r1, [r4, #0]
 8004c36:	2203      	movs	r2, #3
 8004c38:	4650      	mov	r0, sl
 8004c3a:	f7fb faf1 	bl	8000220 <memchr>
 8004c3e:	b138      	cbz	r0, 8004c50 <_svfiprintf_r+0x150>
 8004c40:	9b04      	ldr	r3, [sp, #16]
 8004c42:	eba0 000a 	sub.w	r0, r0, sl
 8004c46:	2240      	movs	r2, #64	@ 0x40
 8004c48:	4082      	lsls	r2, r0
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	3401      	adds	r4, #1
 8004c4e:	9304      	str	r3, [sp, #16]
 8004c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c54:	4824      	ldr	r0, [pc, #144]	@ (8004ce8 <_svfiprintf_r+0x1e8>)
 8004c56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c5a:	2206      	movs	r2, #6
 8004c5c:	f7fb fae0 	bl	8000220 <memchr>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d036      	beq.n	8004cd2 <_svfiprintf_r+0x1d2>
 8004c64:	4b21      	ldr	r3, [pc, #132]	@ (8004cec <_svfiprintf_r+0x1ec>)
 8004c66:	bb1b      	cbnz	r3, 8004cb0 <_svfiprintf_r+0x1b0>
 8004c68:	9b03      	ldr	r3, [sp, #12]
 8004c6a:	3307      	adds	r3, #7
 8004c6c:	f023 0307 	bic.w	r3, r3, #7
 8004c70:	3308      	adds	r3, #8
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c76:	4433      	add	r3, r6
 8004c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c7a:	e76a      	b.n	8004b52 <_svfiprintf_r+0x52>
 8004c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c80:	460c      	mov	r4, r1
 8004c82:	2001      	movs	r0, #1
 8004c84:	e7a8      	b.n	8004bd8 <_svfiprintf_r+0xd8>
 8004c86:	2300      	movs	r3, #0
 8004c88:	3401      	adds	r4, #1
 8004c8a:	9305      	str	r3, [sp, #20]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f04f 0c0a 	mov.w	ip, #10
 8004c92:	4620      	mov	r0, r4
 8004c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c98:	3a30      	subs	r2, #48	@ 0x30
 8004c9a:	2a09      	cmp	r2, #9
 8004c9c:	d903      	bls.n	8004ca6 <_svfiprintf_r+0x1a6>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0c6      	beq.n	8004c30 <_svfiprintf_r+0x130>
 8004ca2:	9105      	str	r1, [sp, #20]
 8004ca4:	e7c4      	b.n	8004c30 <_svfiprintf_r+0x130>
 8004ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004caa:	4604      	mov	r4, r0
 8004cac:	2301      	movs	r3, #1
 8004cae:	e7f0      	b.n	8004c92 <_svfiprintf_r+0x192>
 8004cb0:	ab03      	add	r3, sp, #12
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf0 <_svfiprintf_r+0x1f0>)
 8004cb8:	a904      	add	r1, sp, #16
 8004cba:	4638      	mov	r0, r7
 8004cbc:	f3af 8000 	nop.w
 8004cc0:	1c42      	adds	r2, r0, #1
 8004cc2:	4606      	mov	r6, r0
 8004cc4:	d1d6      	bne.n	8004c74 <_svfiprintf_r+0x174>
 8004cc6:	89ab      	ldrh	r3, [r5, #12]
 8004cc8:	065b      	lsls	r3, r3, #25
 8004cca:	f53f af2d 	bmi.w	8004b28 <_svfiprintf_r+0x28>
 8004cce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cd0:	e72c      	b.n	8004b2c <_svfiprintf_r+0x2c>
 8004cd2:	ab03      	add	r3, sp, #12
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	462a      	mov	r2, r5
 8004cd8:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <_svfiprintf_r+0x1f0>)
 8004cda:	a904      	add	r1, sp, #16
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f000 f91b 	bl	8004f18 <_printf_i>
 8004ce2:	e7ed      	b.n	8004cc0 <_svfiprintf_r+0x1c0>
 8004ce4:	08005368 	.word	0x08005368
 8004ce8:	08005372 	.word	0x08005372
 8004cec:	00000000 	.word	0x00000000
 8004cf0:	08004a49 	.word	0x08004a49
 8004cf4:	0800536e 	.word	0x0800536e

08004cf8 <sbrk_aligned>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	4e0f      	ldr	r6, [pc, #60]	@ (8004d38 <sbrk_aligned+0x40>)
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	6831      	ldr	r1, [r6, #0]
 8004d00:	4605      	mov	r5, r0
 8004d02:	b911      	cbnz	r1, 8004d0a <sbrk_aligned+0x12>
 8004d04:	f000 fa7c 	bl	8005200 <_sbrk_r>
 8004d08:	6030      	str	r0, [r6, #0]
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 fa77 	bl	8005200 <_sbrk_r>
 8004d12:	1c43      	adds	r3, r0, #1
 8004d14:	d103      	bne.n	8004d1e <sbrk_aligned+0x26>
 8004d16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	bd70      	pop	{r4, r5, r6, pc}
 8004d1e:	1cc4      	adds	r4, r0, #3
 8004d20:	f024 0403 	bic.w	r4, r4, #3
 8004d24:	42a0      	cmp	r0, r4
 8004d26:	d0f8      	beq.n	8004d1a <sbrk_aligned+0x22>
 8004d28:	1a21      	subs	r1, r4, r0
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 fa68 	bl	8005200 <_sbrk_r>
 8004d30:	3001      	adds	r0, #1
 8004d32:	d1f2      	bne.n	8004d1a <sbrk_aligned+0x22>
 8004d34:	e7ef      	b.n	8004d16 <sbrk_aligned+0x1e>
 8004d36:	bf00      	nop
 8004d38:	200004b4 	.word	0x200004b4

08004d3c <_malloc_r>:
 8004d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d40:	1ccd      	adds	r5, r1, #3
 8004d42:	f025 0503 	bic.w	r5, r5, #3
 8004d46:	3508      	adds	r5, #8
 8004d48:	2d0c      	cmp	r5, #12
 8004d4a:	bf38      	it	cc
 8004d4c:	250c      	movcc	r5, #12
 8004d4e:	2d00      	cmp	r5, #0
 8004d50:	4606      	mov	r6, r0
 8004d52:	db01      	blt.n	8004d58 <_malloc_r+0x1c>
 8004d54:	42a9      	cmp	r1, r5
 8004d56:	d904      	bls.n	8004d62 <_malloc_r+0x26>
 8004d58:	230c      	movs	r3, #12
 8004d5a:	6033      	str	r3, [r6, #0]
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e38 <_malloc_r+0xfc>
 8004d66:	f000 f9f7 	bl	8005158 <__malloc_lock>
 8004d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d6e:	461c      	mov	r4, r3
 8004d70:	bb44      	cbnz	r4, 8004dc4 <_malloc_r+0x88>
 8004d72:	4629      	mov	r1, r5
 8004d74:	4630      	mov	r0, r6
 8004d76:	f7ff ffbf 	bl	8004cf8 <sbrk_aligned>
 8004d7a:	1c43      	adds	r3, r0, #1
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	d158      	bne.n	8004e32 <_malloc_r+0xf6>
 8004d80:	f8d8 4000 	ldr.w	r4, [r8]
 8004d84:	4627      	mov	r7, r4
 8004d86:	2f00      	cmp	r7, #0
 8004d88:	d143      	bne.n	8004e12 <_malloc_r+0xd6>
 8004d8a:	2c00      	cmp	r4, #0
 8004d8c:	d04b      	beq.n	8004e26 <_malloc_r+0xea>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	4639      	mov	r1, r7
 8004d92:	4630      	mov	r0, r6
 8004d94:	eb04 0903 	add.w	r9, r4, r3
 8004d98:	f000 fa32 	bl	8005200 <_sbrk_r>
 8004d9c:	4581      	cmp	r9, r0
 8004d9e:	d142      	bne.n	8004e26 <_malloc_r+0xea>
 8004da0:	6821      	ldr	r1, [r4, #0]
 8004da2:	1a6d      	subs	r5, r5, r1
 8004da4:	4629      	mov	r1, r5
 8004da6:	4630      	mov	r0, r6
 8004da8:	f7ff ffa6 	bl	8004cf8 <sbrk_aligned>
 8004dac:	3001      	adds	r0, #1
 8004dae:	d03a      	beq.n	8004e26 <_malloc_r+0xea>
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	442b      	add	r3, r5
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	f8d8 3000 	ldr.w	r3, [r8]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	bb62      	cbnz	r2, 8004e18 <_malloc_r+0xdc>
 8004dbe:	f8c8 7000 	str.w	r7, [r8]
 8004dc2:	e00f      	b.n	8004de4 <_malloc_r+0xa8>
 8004dc4:	6822      	ldr	r2, [r4, #0]
 8004dc6:	1b52      	subs	r2, r2, r5
 8004dc8:	d420      	bmi.n	8004e0c <_malloc_r+0xd0>
 8004dca:	2a0b      	cmp	r2, #11
 8004dcc:	d917      	bls.n	8004dfe <_malloc_r+0xc2>
 8004dce:	1961      	adds	r1, r4, r5
 8004dd0:	42a3      	cmp	r3, r4
 8004dd2:	6025      	str	r5, [r4, #0]
 8004dd4:	bf18      	it	ne
 8004dd6:	6059      	strne	r1, [r3, #4]
 8004dd8:	6863      	ldr	r3, [r4, #4]
 8004dda:	bf08      	it	eq
 8004ddc:	f8c8 1000 	streq.w	r1, [r8]
 8004de0:	5162      	str	r2, [r4, r5]
 8004de2:	604b      	str	r3, [r1, #4]
 8004de4:	4630      	mov	r0, r6
 8004de6:	f000 f9bd 	bl	8005164 <__malloc_unlock>
 8004dea:	f104 000b 	add.w	r0, r4, #11
 8004dee:	1d23      	adds	r3, r4, #4
 8004df0:	f020 0007 	bic.w	r0, r0, #7
 8004df4:	1ac2      	subs	r2, r0, r3
 8004df6:	bf1c      	itt	ne
 8004df8:	1a1b      	subne	r3, r3, r0
 8004dfa:	50a3      	strne	r3, [r4, r2]
 8004dfc:	e7af      	b.n	8004d5e <_malloc_r+0x22>
 8004dfe:	6862      	ldr	r2, [r4, #4]
 8004e00:	42a3      	cmp	r3, r4
 8004e02:	bf0c      	ite	eq
 8004e04:	f8c8 2000 	streq.w	r2, [r8]
 8004e08:	605a      	strne	r2, [r3, #4]
 8004e0a:	e7eb      	b.n	8004de4 <_malloc_r+0xa8>
 8004e0c:	4623      	mov	r3, r4
 8004e0e:	6864      	ldr	r4, [r4, #4]
 8004e10:	e7ae      	b.n	8004d70 <_malloc_r+0x34>
 8004e12:	463c      	mov	r4, r7
 8004e14:	687f      	ldr	r7, [r7, #4]
 8004e16:	e7b6      	b.n	8004d86 <_malloc_r+0x4a>
 8004e18:	461a      	mov	r2, r3
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	42a3      	cmp	r3, r4
 8004e1e:	d1fb      	bne.n	8004e18 <_malloc_r+0xdc>
 8004e20:	2300      	movs	r3, #0
 8004e22:	6053      	str	r3, [r2, #4]
 8004e24:	e7de      	b.n	8004de4 <_malloc_r+0xa8>
 8004e26:	230c      	movs	r3, #12
 8004e28:	6033      	str	r3, [r6, #0]
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f000 f99a 	bl	8005164 <__malloc_unlock>
 8004e30:	e794      	b.n	8004d5c <_malloc_r+0x20>
 8004e32:	6005      	str	r5, [r0, #0]
 8004e34:	e7d6      	b.n	8004de4 <_malloc_r+0xa8>
 8004e36:	bf00      	nop
 8004e38:	200004b8 	.word	0x200004b8

08004e3c <_printf_common>:
 8004e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	4616      	mov	r6, r2
 8004e42:	4698      	mov	r8, r3
 8004e44:	688a      	ldr	r2, [r1, #8]
 8004e46:	690b      	ldr	r3, [r1, #16]
 8004e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	bfb8      	it	lt
 8004e50:	4613      	movlt	r3, r2
 8004e52:	6033      	str	r3, [r6, #0]
 8004e54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e58:	4607      	mov	r7, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	b10a      	cbz	r2, 8004e62 <_printf_common+0x26>
 8004e5e:	3301      	adds	r3, #1
 8004e60:	6033      	str	r3, [r6, #0]
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	0699      	lsls	r1, r3, #26
 8004e66:	bf42      	ittt	mi
 8004e68:	6833      	ldrmi	r3, [r6, #0]
 8004e6a:	3302      	addmi	r3, #2
 8004e6c:	6033      	strmi	r3, [r6, #0]
 8004e6e:	6825      	ldr	r5, [r4, #0]
 8004e70:	f015 0506 	ands.w	r5, r5, #6
 8004e74:	d106      	bne.n	8004e84 <_printf_common+0x48>
 8004e76:	f104 0a19 	add.w	sl, r4, #25
 8004e7a:	68e3      	ldr	r3, [r4, #12]
 8004e7c:	6832      	ldr	r2, [r6, #0]
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	42ab      	cmp	r3, r5
 8004e82:	dc26      	bgt.n	8004ed2 <_printf_common+0x96>
 8004e84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	3b00      	subs	r3, #0
 8004e8c:	bf18      	it	ne
 8004e8e:	2301      	movne	r3, #1
 8004e90:	0692      	lsls	r2, r2, #26
 8004e92:	d42b      	bmi.n	8004eec <_printf_common+0xb0>
 8004e94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e98:	4641      	mov	r1, r8
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	47c8      	blx	r9
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d01e      	beq.n	8004ee0 <_printf_common+0xa4>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	6922      	ldr	r2, [r4, #16]
 8004ea6:	f003 0306 	and.w	r3, r3, #6
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	bf02      	ittt	eq
 8004eae:	68e5      	ldreq	r5, [r4, #12]
 8004eb0:	6833      	ldreq	r3, [r6, #0]
 8004eb2:	1aed      	subeq	r5, r5, r3
 8004eb4:	68a3      	ldr	r3, [r4, #8]
 8004eb6:	bf0c      	ite	eq
 8004eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ebc:	2500      	movne	r5, #0
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	bfc4      	itt	gt
 8004ec2:	1a9b      	subgt	r3, r3, r2
 8004ec4:	18ed      	addgt	r5, r5, r3
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	341a      	adds	r4, #26
 8004eca:	42b5      	cmp	r5, r6
 8004ecc:	d11a      	bne.n	8004f04 <_printf_common+0xc8>
 8004ece:	2000      	movs	r0, #0
 8004ed0:	e008      	b.n	8004ee4 <_printf_common+0xa8>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	4652      	mov	r2, sl
 8004ed6:	4641      	mov	r1, r8
 8004ed8:	4638      	mov	r0, r7
 8004eda:	47c8      	blx	r9
 8004edc:	3001      	adds	r0, #1
 8004ede:	d103      	bne.n	8004ee8 <_printf_common+0xac>
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee8:	3501      	adds	r5, #1
 8004eea:	e7c6      	b.n	8004e7a <_printf_common+0x3e>
 8004eec:	18e1      	adds	r1, r4, r3
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	2030      	movs	r0, #48	@ 0x30
 8004ef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ef6:	4422      	add	r2, r4
 8004ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004efc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f00:	3302      	adds	r3, #2
 8004f02:	e7c7      	b.n	8004e94 <_printf_common+0x58>
 8004f04:	2301      	movs	r3, #1
 8004f06:	4622      	mov	r2, r4
 8004f08:	4641      	mov	r1, r8
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	47c8      	blx	r9
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d0e6      	beq.n	8004ee0 <_printf_common+0xa4>
 8004f12:	3601      	adds	r6, #1
 8004f14:	e7d9      	b.n	8004eca <_printf_common+0x8e>
	...

08004f18 <_printf_i>:
 8004f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1c:	7e0f      	ldrb	r7, [r1, #24]
 8004f1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f20:	2f78      	cmp	r7, #120	@ 0x78
 8004f22:	4691      	mov	r9, r2
 8004f24:	4680      	mov	r8, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	469a      	mov	sl, r3
 8004f2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f2e:	d807      	bhi.n	8004f40 <_printf_i+0x28>
 8004f30:	2f62      	cmp	r7, #98	@ 0x62
 8004f32:	d80a      	bhi.n	8004f4a <_printf_i+0x32>
 8004f34:	2f00      	cmp	r7, #0
 8004f36:	f000 80d2 	beq.w	80050de <_printf_i+0x1c6>
 8004f3a:	2f58      	cmp	r7, #88	@ 0x58
 8004f3c:	f000 80b9 	beq.w	80050b2 <_printf_i+0x19a>
 8004f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f48:	e03a      	b.n	8004fc0 <_printf_i+0xa8>
 8004f4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f4e:	2b15      	cmp	r3, #21
 8004f50:	d8f6      	bhi.n	8004f40 <_printf_i+0x28>
 8004f52:	a101      	add	r1, pc, #4	@ (adr r1, 8004f58 <_printf_i+0x40>)
 8004f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f58:	08004fb1 	.word	0x08004fb1
 8004f5c:	08004fc5 	.word	0x08004fc5
 8004f60:	08004f41 	.word	0x08004f41
 8004f64:	08004f41 	.word	0x08004f41
 8004f68:	08004f41 	.word	0x08004f41
 8004f6c:	08004f41 	.word	0x08004f41
 8004f70:	08004fc5 	.word	0x08004fc5
 8004f74:	08004f41 	.word	0x08004f41
 8004f78:	08004f41 	.word	0x08004f41
 8004f7c:	08004f41 	.word	0x08004f41
 8004f80:	08004f41 	.word	0x08004f41
 8004f84:	080050c5 	.word	0x080050c5
 8004f88:	08004fef 	.word	0x08004fef
 8004f8c:	0800507f 	.word	0x0800507f
 8004f90:	08004f41 	.word	0x08004f41
 8004f94:	08004f41 	.word	0x08004f41
 8004f98:	080050e7 	.word	0x080050e7
 8004f9c:	08004f41 	.word	0x08004f41
 8004fa0:	08004fef 	.word	0x08004fef
 8004fa4:	08004f41 	.word	0x08004f41
 8004fa8:	08004f41 	.word	0x08004f41
 8004fac:	08005087 	.word	0x08005087
 8004fb0:	6833      	ldr	r3, [r6, #0]
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6032      	str	r2, [r6, #0]
 8004fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e09d      	b.n	8005100 <_printf_i+0x1e8>
 8004fc4:	6833      	ldr	r3, [r6, #0]
 8004fc6:	6820      	ldr	r0, [r4, #0]
 8004fc8:	1d19      	adds	r1, r3, #4
 8004fca:	6031      	str	r1, [r6, #0]
 8004fcc:	0606      	lsls	r6, r0, #24
 8004fce:	d501      	bpl.n	8004fd4 <_printf_i+0xbc>
 8004fd0:	681d      	ldr	r5, [r3, #0]
 8004fd2:	e003      	b.n	8004fdc <_printf_i+0xc4>
 8004fd4:	0645      	lsls	r5, r0, #25
 8004fd6:	d5fb      	bpl.n	8004fd0 <_printf_i+0xb8>
 8004fd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	da03      	bge.n	8004fe8 <_printf_i+0xd0>
 8004fe0:	232d      	movs	r3, #45	@ 0x2d
 8004fe2:	426d      	negs	r5, r5
 8004fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fe8:	4859      	ldr	r0, [pc, #356]	@ (8005150 <_printf_i+0x238>)
 8004fea:	230a      	movs	r3, #10
 8004fec:	e011      	b.n	8005012 <_printf_i+0xfa>
 8004fee:	6821      	ldr	r1, [r4, #0]
 8004ff0:	6833      	ldr	r3, [r6, #0]
 8004ff2:	0608      	lsls	r0, r1, #24
 8004ff4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ff8:	d402      	bmi.n	8005000 <_printf_i+0xe8>
 8004ffa:	0649      	lsls	r1, r1, #25
 8004ffc:	bf48      	it	mi
 8004ffe:	b2ad      	uxthmi	r5, r5
 8005000:	2f6f      	cmp	r7, #111	@ 0x6f
 8005002:	4853      	ldr	r0, [pc, #332]	@ (8005150 <_printf_i+0x238>)
 8005004:	6033      	str	r3, [r6, #0]
 8005006:	bf14      	ite	ne
 8005008:	230a      	movne	r3, #10
 800500a:	2308      	moveq	r3, #8
 800500c:	2100      	movs	r1, #0
 800500e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005012:	6866      	ldr	r6, [r4, #4]
 8005014:	60a6      	str	r6, [r4, #8]
 8005016:	2e00      	cmp	r6, #0
 8005018:	bfa2      	ittt	ge
 800501a:	6821      	ldrge	r1, [r4, #0]
 800501c:	f021 0104 	bicge.w	r1, r1, #4
 8005020:	6021      	strge	r1, [r4, #0]
 8005022:	b90d      	cbnz	r5, 8005028 <_printf_i+0x110>
 8005024:	2e00      	cmp	r6, #0
 8005026:	d04b      	beq.n	80050c0 <_printf_i+0x1a8>
 8005028:	4616      	mov	r6, r2
 800502a:	fbb5 f1f3 	udiv	r1, r5, r3
 800502e:	fb03 5711 	mls	r7, r3, r1, r5
 8005032:	5dc7      	ldrb	r7, [r0, r7]
 8005034:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005038:	462f      	mov	r7, r5
 800503a:	42bb      	cmp	r3, r7
 800503c:	460d      	mov	r5, r1
 800503e:	d9f4      	bls.n	800502a <_printf_i+0x112>
 8005040:	2b08      	cmp	r3, #8
 8005042:	d10b      	bne.n	800505c <_printf_i+0x144>
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	07df      	lsls	r7, r3, #31
 8005048:	d508      	bpl.n	800505c <_printf_i+0x144>
 800504a:	6923      	ldr	r3, [r4, #16]
 800504c:	6861      	ldr	r1, [r4, #4]
 800504e:	4299      	cmp	r1, r3
 8005050:	bfde      	ittt	le
 8005052:	2330      	movle	r3, #48	@ 0x30
 8005054:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005058:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800505c:	1b92      	subs	r2, r2, r6
 800505e:	6122      	str	r2, [r4, #16]
 8005060:	f8cd a000 	str.w	sl, [sp]
 8005064:	464b      	mov	r3, r9
 8005066:	aa03      	add	r2, sp, #12
 8005068:	4621      	mov	r1, r4
 800506a:	4640      	mov	r0, r8
 800506c:	f7ff fee6 	bl	8004e3c <_printf_common>
 8005070:	3001      	adds	r0, #1
 8005072:	d14a      	bne.n	800510a <_printf_i+0x1f2>
 8005074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005078:	b004      	add	sp, #16
 800507a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	f043 0320 	orr.w	r3, r3, #32
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	4833      	ldr	r0, [pc, #204]	@ (8005154 <_printf_i+0x23c>)
 8005088:	2778      	movs	r7, #120	@ 0x78
 800508a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	6831      	ldr	r1, [r6, #0]
 8005092:	061f      	lsls	r7, r3, #24
 8005094:	f851 5b04 	ldr.w	r5, [r1], #4
 8005098:	d402      	bmi.n	80050a0 <_printf_i+0x188>
 800509a:	065f      	lsls	r7, r3, #25
 800509c:	bf48      	it	mi
 800509e:	b2ad      	uxthmi	r5, r5
 80050a0:	6031      	str	r1, [r6, #0]
 80050a2:	07d9      	lsls	r1, r3, #31
 80050a4:	bf44      	itt	mi
 80050a6:	f043 0320 	orrmi.w	r3, r3, #32
 80050aa:	6023      	strmi	r3, [r4, #0]
 80050ac:	b11d      	cbz	r5, 80050b6 <_printf_i+0x19e>
 80050ae:	2310      	movs	r3, #16
 80050b0:	e7ac      	b.n	800500c <_printf_i+0xf4>
 80050b2:	4827      	ldr	r0, [pc, #156]	@ (8005150 <_printf_i+0x238>)
 80050b4:	e7e9      	b.n	800508a <_printf_i+0x172>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	f023 0320 	bic.w	r3, r3, #32
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	e7f6      	b.n	80050ae <_printf_i+0x196>
 80050c0:	4616      	mov	r6, r2
 80050c2:	e7bd      	b.n	8005040 <_printf_i+0x128>
 80050c4:	6833      	ldr	r3, [r6, #0]
 80050c6:	6825      	ldr	r5, [r4, #0]
 80050c8:	6961      	ldr	r1, [r4, #20]
 80050ca:	1d18      	adds	r0, r3, #4
 80050cc:	6030      	str	r0, [r6, #0]
 80050ce:	062e      	lsls	r6, r5, #24
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	d501      	bpl.n	80050d8 <_printf_i+0x1c0>
 80050d4:	6019      	str	r1, [r3, #0]
 80050d6:	e002      	b.n	80050de <_printf_i+0x1c6>
 80050d8:	0668      	lsls	r0, r5, #25
 80050da:	d5fb      	bpl.n	80050d4 <_printf_i+0x1bc>
 80050dc:	8019      	strh	r1, [r3, #0]
 80050de:	2300      	movs	r3, #0
 80050e0:	6123      	str	r3, [r4, #16]
 80050e2:	4616      	mov	r6, r2
 80050e4:	e7bc      	b.n	8005060 <_printf_i+0x148>
 80050e6:	6833      	ldr	r3, [r6, #0]
 80050e8:	1d1a      	adds	r2, r3, #4
 80050ea:	6032      	str	r2, [r6, #0]
 80050ec:	681e      	ldr	r6, [r3, #0]
 80050ee:	6862      	ldr	r2, [r4, #4]
 80050f0:	2100      	movs	r1, #0
 80050f2:	4630      	mov	r0, r6
 80050f4:	f7fb f894 	bl	8000220 <memchr>
 80050f8:	b108      	cbz	r0, 80050fe <_printf_i+0x1e6>
 80050fa:	1b80      	subs	r0, r0, r6
 80050fc:	6060      	str	r0, [r4, #4]
 80050fe:	6863      	ldr	r3, [r4, #4]
 8005100:	6123      	str	r3, [r4, #16]
 8005102:	2300      	movs	r3, #0
 8005104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005108:	e7aa      	b.n	8005060 <_printf_i+0x148>
 800510a:	6923      	ldr	r3, [r4, #16]
 800510c:	4632      	mov	r2, r6
 800510e:	4649      	mov	r1, r9
 8005110:	4640      	mov	r0, r8
 8005112:	47d0      	blx	sl
 8005114:	3001      	adds	r0, #1
 8005116:	d0ad      	beq.n	8005074 <_printf_i+0x15c>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	079b      	lsls	r3, r3, #30
 800511c:	d413      	bmi.n	8005146 <_printf_i+0x22e>
 800511e:	68e0      	ldr	r0, [r4, #12]
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	4298      	cmp	r0, r3
 8005124:	bfb8      	it	lt
 8005126:	4618      	movlt	r0, r3
 8005128:	e7a6      	b.n	8005078 <_printf_i+0x160>
 800512a:	2301      	movs	r3, #1
 800512c:	4632      	mov	r2, r6
 800512e:	4649      	mov	r1, r9
 8005130:	4640      	mov	r0, r8
 8005132:	47d0      	blx	sl
 8005134:	3001      	adds	r0, #1
 8005136:	d09d      	beq.n	8005074 <_printf_i+0x15c>
 8005138:	3501      	adds	r5, #1
 800513a:	68e3      	ldr	r3, [r4, #12]
 800513c:	9903      	ldr	r1, [sp, #12]
 800513e:	1a5b      	subs	r3, r3, r1
 8005140:	42ab      	cmp	r3, r5
 8005142:	dcf2      	bgt.n	800512a <_printf_i+0x212>
 8005144:	e7eb      	b.n	800511e <_printf_i+0x206>
 8005146:	2500      	movs	r5, #0
 8005148:	f104 0619 	add.w	r6, r4, #25
 800514c:	e7f5      	b.n	800513a <_printf_i+0x222>
 800514e:	bf00      	nop
 8005150:	08005379 	.word	0x08005379
 8005154:	0800538a 	.word	0x0800538a

08005158 <__malloc_lock>:
 8005158:	4801      	ldr	r0, [pc, #4]	@ (8005160 <__malloc_lock+0x8>)
 800515a:	f7ff bc73 	b.w	8004a44 <__retarget_lock_acquire_recursive>
 800515e:	bf00      	nop
 8005160:	200004b0 	.word	0x200004b0

08005164 <__malloc_unlock>:
 8005164:	4801      	ldr	r0, [pc, #4]	@ (800516c <__malloc_unlock+0x8>)
 8005166:	f7ff bc6e 	b.w	8004a46 <__retarget_lock_release_recursive>
 800516a:	bf00      	nop
 800516c:	200004b0 	.word	0x200004b0

08005170 <_realloc_r>:
 8005170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005174:	4680      	mov	r8, r0
 8005176:	4615      	mov	r5, r2
 8005178:	460c      	mov	r4, r1
 800517a:	b921      	cbnz	r1, 8005186 <_realloc_r+0x16>
 800517c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005180:	4611      	mov	r1, r2
 8005182:	f7ff bddb 	b.w	8004d3c <_malloc_r>
 8005186:	b92a      	cbnz	r2, 8005194 <_realloc_r+0x24>
 8005188:	f000 f858 	bl	800523c <_free_r>
 800518c:	2400      	movs	r4, #0
 800518e:	4620      	mov	r0, r4
 8005190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005194:	f000 f89c 	bl	80052d0 <_malloc_usable_size_r>
 8005198:	4285      	cmp	r5, r0
 800519a:	4606      	mov	r6, r0
 800519c:	d802      	bhi.n	80051a4 <_realloc_r+0x34>
 800519e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80051a2:	d8f4      	bhi.n	800518e <_realloc_r+0x1e>
 80051a4:	4629      	mov	r1, r5
 80051a6:	4640      	mov	r0, r8
 80051a8:	f7ff fdc8 	bl	8004d3c <_malloc_r>
 80051ac:	4607      	mov	r7, r0
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d0ec      	beq.n	800518c <_realloc_r+0x1c>
 80051b2:	42b5      	cmp	r5, r6
 80051b4:	462a      	mov	r2, r5
 80051b6:	4621      	mov	r1, r4
 80051b8:	bf28      	it	cs
 80051ba:	4632      	movcs	r2, r6
 80051bc:	f000 f830 	bl	8005220 <memcpy>
 80051c0:	4621      	mov	r1, r4
 80051c2:	4640      	mov	r0, r8
 80051c4:	f000 f83a 	bl	800523c <_free_r>
 80051c8:	463c      	mov	r4, r7
 80051ca:	e7e0      	b.n	800518e <_realloc_r+0x1e>

080051cc <memmove>:
 80051cc:	4288      	cmp	r0, r1
 80051ce:	b510      	push	{r4, lr}
 80051d0:	eb01 0402 	add.w	r4, r1, r2
 80051d4:	d902      	bls.n	80051dc <memmove+0x10>
 80051d6:	4284      	cmp	r4, r0
 80051d8:	4623      	mov	r3, r4
 80051da:	d807      	bhi.n	80051ec <memmove+0x20>
 80051dc:	1e43      	subs	r3, r0, #1
 80051de:	42a1      	cmp	r1, r4
 80051e0:	d008      	beq.n	80051f4 <memmove+0x28>
 80051e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051ea:	e7f8      	b.n	80051de <memmove+0x12>
 80051ec:	4402      	add	r2, r0
 80051ee:	4601      	mov	r1, r0
 80051f0:	428a      	cmp	r2, r1
 80051f2:	d100      	bne.n	80051f6 <memmove+0x2a>
 80051f4:	bd10      	pop	{r4, pc}
 80051f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051fe:	e7f7      	b.n	80051f0 <memmove+0x24>

08005200 <_sbrk_r>:
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4d06      	ldr	r5, [pc, #24]	@ (800521c <_sbrk_r+0x1c>)
 8005204:	2300      	movs	r3, #0
 8005206:	4604      	mov	r4, r0
 8005208:	4608      	mov	r0, r1
 800520a:	602b      	str	r3, [r5, #0]
 800520c:	f7fc f9f4 	bl	80015f8 <_sbrk>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d102      	bne.n	800521a <_sbrk_r+0x1a>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	b103      	cbz	r3, 800521a <_sbrk_r+0x1a>
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	bd38      	pop	{r3, r4, r5, pc}
 800521c:	200004bc 	.word	0x200004bc

08005220 <memcpy>:
 8005220:	440a      	add	r2, r1
 8005222:	4291      	cmp	r1, r2
 8005224:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005228:	d100      	bne.n	800522c <memcpy+0xc>
 800522a:	4770      	bx	lr
 800522c:	b510      	push	{r4, lr}
 800522e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005236:	4291      	cmp	r1, r2
 8005238:	d1f9      	bne.n	800522e <memcpy+0xe>
 800523a:	bd10      	pop	{r4, pc}

0800523c <_free_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4605      	mov	r5, r0
 8005240:	2900      	cmp	r1, #0
 8005242:	d041      	beq.n	80052c8 <_free_r+0x8c>
 8005244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005248:	1f0c      	subs	r4, r1, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	bfb8      	it	lt
 800524e:	18e4      	addlt	r4, r4, r3
 8005250:	f7ff ff82 	bl	8005158 <__malloc_lock>
 8005254:	4a1d      	ldr	r2, [pc, #116]	@ (80052cc <_free_r+0x90>)
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	b933      	cbnz	r3, 8005268 <_free_r+0x2c>
 800525a:	6063      	str	r3, [r4, #4]
 800525c:	6014      	str	r4, [r2, #0]
 800525e:	4628      	mov	r0, r5
 8005260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005264:	f7ff bf7e 	b.w	8005164 <__malloc_unlock>
 8005268:	42a3      	cmp	r3, r4
 800526a:	d908      	bls.n	800527e <_free_r+0x42>
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	1821      	adds	r1, r4, r0
 8005270:	428b      	cmp	r3, r1
 8005272:	bf01      	itttt	eq
 8005274:	6819      	ldreq	r1, [r3, #0]
 8005276:	685b      	ldreq	r3, [r3, #4]
 8005278:	1809      	addeq	r1, r1, r0
 800527a:	6021      	streq	r1, [r4, #0]
 800527c:	e7ed      	b.n	800525a <_free_r+0x1e>
 800527e:	461a      	mov	r2, r3
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	b10b      	cbz	r3, 8005288 <_free_r+0x4c>
 8005284:	42a3      	cmp	r3, r4
 8005286:	d9fa      	bls.n	800527e <_free_r+0x42>
 8005288:	6811      	ldr	r1, [r2, #0]
 800528a:	1850      	adds	r0, r2, r1
 800528c:	42a0      	cmp	r0, r4
 800528e:	d10b      	bne.n	80052a8 <_free_r+0x6c>
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	4401      	add	r1, r0
 8005294:	1850      	adds	r0, r2, r1
 8005296:	4283      	cmp	r3, r0
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	d1e0      	bne.n	800525e <_free_r+0x22>
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	6053      	str	r3, [r2, #4]
 80052a2:	4408      	add	r0, r1
 80052a4:	6010      	str	r0, [r2, #0]
 80052a6:	e7da      	b.n	800525e <_free_r+0x22>
 80052a8:	d902      	bls.n	80052b0 <_free_r+0x74>
 80052aa:	230c      	movs	r3, #12
 80052ac:	602b      	str	r3, [r5, #0]
 80052ae:	e7d6      	b.n	800525e <_free_r+0x22>
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	1821      	adds	r1, r4, r0
 80052b4:	428b      	cmp	r3, r1
 80052b6:	bf04      	itt	eq
 80052b8:	6819      	ldreq	r1, [r3, #0]
 80052ba:	685b      	ldreq	r3, [r3, #4]
 80052bc:	6063      	str	r3, [r4, #4]
 80052be:	bf04      	itt	eq
 80052c0:	1809      	addeq	r1, r1, r0
 80052c2:	6021      	streq	r1, [r4, #0]
 80052c4:	6054      	str	r4, [r2, #4]
 80052c6:	e7ca      	b.n	800525e <_free_r+0x22>
 80052c8:	bd38      	pop	{r3, r4, r5, pc}
 80052ca:	bf00      	nop
 80052cc:	200004b8 	.word	0x200004b8

080052d0 <_malloc_usable_size_r>:
 80052d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052d4:	1f18      	subs	r0, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bfbc      	itt	lt
 80052da:	580b      	ldrlt	r3, [r1, r0]
 80052dc:	18c0      	addlt	r0, r0, r3
 80052de:	4770      	bx	lr

080052e0 <_init>:
 80052e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e2:	bf00      	nop
 80052e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e6:	bc08      	pop	{r3}
 80052e8:	469e      	mov	lr, r3
 80052ea:	4770      	bx	lr

080052ec <_fini>:
 80052ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ee:	bf00      	nop
 80052f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f2:	bc08      	pop	{r3}
 80052f4:	469e      	mov	lr, r3
 80052f6:	4770      	bx	lr
